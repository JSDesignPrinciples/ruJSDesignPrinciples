[09/07/14 17:56:32] Антон Шувалов: @question Все больше сталкиваюсь с middlewares, в express, в loa, в page.js, и мне очень нравится такой подход. Подскажите, что полезного можно почитать по этой теме? Я так понимаю, это не просто паттерн, это какая-то архитектура. Подскажите, пожалуйста, ссылок или кейвордов для гугла, где можно о полезных архитектурных решениях почитать в принципе. Ну или ссылок на модули с крутой архитектурой.
[09/07/14 17:57:39] Alexey Migutsky: это паттерн Chain Of Responsibilities
[09/07/14 17:58:04] Alexey Migutsky: ну и его вариации :)
[09/07/14 18:02:04] Антон Шувалов: Спасибо! Заинтересовала тема паттернов, глядя как TJ ловко использует цепочку ответственности. А что можно почитать чтобы получить более-менее фундаментальное понимание этой темы? Стефанова? Такие паттерны называются «архитектурный паттерн», да?
[09/07/14 18:03:34] Alexey Migutsky: Почитать - хз что. Понимание этого всего приходит тупо после надрыва мозга
[09/07/14 18:03:43] Alexey Migutsky: "с опытом" :)
[09/07/14 18:03:58] Alexey Migutsky: Надо как минимум пощупать несколько разных систем и, желательно, языков
[09/07/14 18:04:03] Alexey Migutsky: я пока не встретил книгу, которая бы ок рассказывала про паттерны и нах они нужны, и как их грамотно применять, и тыды и тыпы
[09/07/14 18:04:38] Alexey Migutsky: имхо, это просто тренировка мозга на тему "как можно сделать лучше этот кусок кода"
[09/07/14 18:04:46] Андрей Листочкин: Да, он появился лет 20 назад на Перле, оттуда перекочевал в Джаву, потом руби, питон и наконец Нод
[09/07/14 18:04:47] Alexey Migutsky: Но если совсем не знакомы - то НЕ читайте GoF, а начните с каких-нить Head First Design Patterns
[09/07/14 18:05:00] Антон Шувалов: Я понимаю middlewares, но мне настолько это понравилось, когда я понял, что захотелось узнать, что еще есть похожего, классификацию и тд.
[09/07/14 18:05:18] Alexey Migutsky: Можно ещё Фаулера почитать, но там Содом и Гоморра
[09/07/14 18:05:26] Alexey Migutsky: зато архитектуры интересные и разные
[09/07/14 18:05:40] Андрей Листочкин: На Java ищи servlet filters - по идее должно быть инфы на эту тему
[09/07/14 18:05:55] Антон Шувалов: Понятно, спасибо :)
[09/07/14 18:06:04] Alexey Migutsky: > классификацию и тд.
Ну тут такое - классификация той же GoF зависит от парадигмы и большей частью основана на ООП и ООД
[09/07/14 18:06:39] Alexey Migutsky: в ЖСе функции - первородные "жители" языка
[09/07/14 18:06:50] Alexey Migutsky: что убивает часть паттернов ГоФ, потому что нах не нужны :)
[09/07/14 18:06:58] Alexey Migutsky: Архитектура во многом зависит от контекста
[09/07/14 18:07:53] Alexey Migutsky: В целом да, это архитектурные паттерны, и я по ним почитываю Фаулера - многобукаф, местами оч неоднозначно, но я пока не нашёл более менее вменяемого источника
[09/07/14 18:09:12] Alexey Migutsky: Плюс ко всему, некоторые паттерны отличаются незначительными деталями.
К примеру, чепочка ответственности не терминейтится, на скока я помню.
А миддлваре терминейтится - и это уже другой паттерн, но из того же семейства :)
[09/07/14 18:09:58] Nikita Butenko: Head First  про паттерны же вроде хорошо http://shop.oreilly.com/product/9780596007126.do
[09/07/14 18:11:04] Alexey Migutsky: я бы даже сказал "прекрасно", но мало :)
[09/07/14 18:11:07] Alexey Migutsky: и контекста маловато
[09/07/14 18:12:00] Alexey Migutsky: ну т.е. изучение паттернов имхо однозначно надо с хед ферст начинать
[09/07/14 18:13:59] Антон Шувалов: А как вы читали? Перед сном? Или читали и пробовали сразу?
[09/07/14 18:14:05] Андрей Листочкин: Вообще один из хороших вариантов прокачаться в плане архитектуре - поискать что-то на эту тему в более старых платформах.

Хочешь знать, как делать масштабируемые системы?
- transaction servers
- Java EE
- Erlang

Хочешь прокачаться в плане архитектуры UI?
- Cocoa
- RAD
- .NET/Xaml

Интересна мобильная разработка?
- Symbian
- Java ME (андроид отсюда столько идей слизал - ууу)

Все конечно, нужно делить надвое - многие паттерны и идеи либо неприменимы сегодня в том виде, в котором их придумали изначально, либо вообще стали частью языков и платформ. Но в целом, история ходит по кругу - десять лет назад все кричали, что SOA в Java - это очень сложно и надо валить на Рельсы, а сегодня - что SOA в Рельсах - это сложно и надо валить на Ноду :)
[09/07/14 18:14:32] Антон Шувалов: Если просто перед сном почитчывать, то стоит ждать эффект? Я хочу с чего-то обзорного начать сперва
[09/07/14 18:15:37] Антон Шувалов: Антон Шувалов не знает что такое SOA 0_0
[09/07/14 18:17:03] Evgeniy Kurtov: SOA с  рельсами действительно под большим вопросом
[09/07/14 18:17:20] Джон, просто Джон: Service Oriented Architecture
[09/07/14 18:18:39] Антон Шувалов: А, кажется немного понял: есть микро-паттерны, которые помогают писать рутинный код проще, типа, стратегии (?) и тд, есть более высокоуровневые паттерны, типа Chain of Responsibilities, которые определяют архитектуру фреймворков, и есть макро-паттерны на уровне языка/среды, которые определяют их возможности и класс задач, для которых они разрабатываются, правильно?
[09/07/14 18:19:47] Evgeniy Kurtov: пока понятно одно - MVC это лишь один из архитекутрных шаблонов и далеко не всегда выгодный
[09/07/14 18:19:55] Антон Шувалов: Head First даст мне хотя бы поверхностный обзор всех этих штук? Или лучше для этого начать с других книг, чтобы понять вообще, что мне нужно, и куда дальше копать?
[09/07/14 18:20:46] Alexey Migutsky: > Если просто перед сном почитчывать, то стоит ждать эффект? Я хочу с чего-то обзорного начать сперва
it depends от человека.
Я теоретик, мне норм заходит без практики, потому что я так привык.

Но лучше сразу пробовать
[09/07/14 18:21:11] Alexey Migutsky: > и класс задач, для которых они разрабатываются, правильно?
С языком не всё так просто, но в целом да :)
[09/07/14 18:21:26] Ivan Motiienko: On 09/07/14, at 18:20, Антон Шувалов wrote:
> Head First
как раз хорош для въезжания
[09/07/14 18:21:38] Alexey Migutsky: Плюс у микро-паттернов и макро-паттернов своя классификация - типа "структурные паттерны", "паттерны создания всякой шняги", "паттерны дающие нужное поведение"
[09/07/14 18:22:07] Ivan Motiienko: но там все паттерны под жаву
[09/07/14 18:22:21] Alexey Migutsky: Макро-паттерны - это скорее к системным паттернам - всякие шины данных, организация флоу кода/данных, интеграция
[09/07/14 18:22:48] Антон Шувалов: Ага, классификация — одна из основных вещей, которые меня тут сейча интересуют
[09/07/14 18:22:51] Alexey Migutsky: > пока понятно одно - MVC это лишь один из архитекутрных шаблонов и далеко не всегда выгодный
MVC сам по себе далеееееекооооо не один шаблон, а "Самая Большая Ошибка Большинства Девелоперов"
[09/07/14 18:23:03] Sergey Koval (DymokSR): кто-нибудь работал с socket.io из objective c?
[09/07/14 18:23:07] Alexey Migutsky: потому что подвидов этого "МВЦ" существует ёбом, и дьявол в мелочах
[09/07/14 18:23:25] rosko.com.ru: rosko.com.ru added re0ne.skype to this conversation
[09/07/14 18:23:26] Alexey Migutsky: чего стоит тока MVC Model 2, который в джава мире в JSP
[09/07/14 18:23:42] Alexey Migutsky: Сломал жизнь половине джавистов - они всё воспринимают сквозь призму модел2
[09/07/14 18:23:46] Sergey Koval (DymokSR): в том плане, что насколько я понимаю, у socket.io свой протокол
[09/07/14 18:23:57] Антон Шувалов: А что скажите насчет «Идеального кода» и «Рефакторинга»? Посоветовали их еще почитать по паттернам. Да и давно в списке на чтение стоят
[09/07/14 18:23:57] Alexey Migutsky: > но там все паттерны под жаву
Под ООД скорее
[09/07/14 18:23:59] Sergey Koval (DymokSR): т.е. либо нужно реализовать работу с ним самому, либо уже есть готовая либа/класс/фреймворк
[09/07/14 18:24:18] Sergey Koval (DymokSR): есть https://github.com/pkyeck/socket.IO-objc
[09/07/14 18:24:22] Alexey Migutsky: > Ага, классификация — одна из основных вещей, которые меня тут сейча интересуют
Начни с Хэд Фёст, и потом по гуглу
[09/07/14 18:24:41] Sergey Koval (DymokSR): но у них совместимость до 0.9.х
[09/07/14 18:24:44] Alexey Migutsky: Я реально не знаю норм классификации на разных уровнях, и даже хз как это найти
[09/07/14 18:25:02] Alexey Migutsky: > т.е. либо нужно реализовать работу с ним самому, либо уже есть готовая либа/класс/фреймворк
Ищи готовые решения на гитхабе.
[09/07/14 18:25:12] Alexey Migutsky: СокетИО есть реализация под разные языки и окружения
[09/07/14 18:25:18] Alexey Migutsky: но тока с 1.0+ работать вряд ли будет
[09/07/14 18:25:35] Sergey Koval (DymokSR): у меня сейчас socket.io 1.0.6
[09/07/14 18:25:39] Alexey Migutsky: > но у них совместимость до 0.9.х
А с новыми сокетами никто щас работать и не будет - им пару месяцев от роду :)
[09/07/14 18:26:28] Sergey Koval (DymokSR): есть еще мысль uiwebview воспользоваться :)
[09/07/14 18:27:53] Alexey Migutsky: ну можно поковырять
[09/07/14 18:27:57] Alexey Migutsky: там приоритет транспортов сменился
[09/07/14 18:28:01] Alexey Migutsky: апи вроде как компэтибл
[09/07/14 18:28:10] Alexey Migutsky: ну по крайней мере слой совместимости я там видел краем глаза
[09/07/14 18:43:54] Kirill Cherkashin: Вот хочу насчет паттернов от себя вставить: я читал читал все эти книги и не мог воткнуть, че они все от меня хотят и зачем это нужно, а потом сел за Java и сразу стало многое ясно, а паттерны - частью общения, когда ты это используешь и понимаешь что и зачем, намного проще объяснить деву рядом с тобой, что ты сделал фабрику для того-то и того-то
[09/07/14 18:44:59] Kirill Cherkashin: Но многие паттерны в джаве тупо призваны решить проблемы языка, например в джаве до недавнего функции не были объектами первого класса, у них для этого стратегии, в JS стратегии тоже можно использовать, но совсем другой юз кейс
[09/07/14 18:45:24] Kirill Cherkashin: Поэтому если читать про паттерны в Джаве, надо писать на джаве, иначе намного сложнее будет разабраться
[09/07/14 18:46:08] Антон Шувалов: Ну, эта часть меня интересует несколько меньше, чем построение гибкой и масштабируемой архитектуры (не знаю, вообще, возможно ли такое).
[09/07/14 18:47:32] Антон Шувалов: И, да, про язык согласен. Читал «Программист-прагматик» с примерами на java/smalltalk и не во все понимал. Примеры хочется по js.
[09/07/14 18:48:19] Антон Шувалов: Вспоминается только Стоян Стефанов. Вот стоит, интересно, его читать? Я бегло смотрел первую треть, очень многое мне давно знакомо.
[09/07/14 18:48:59] Антон Шувалов: чейнинги через `return this;` в методах не особенно интересуют, я в такие «паттерны» уже умею, вроде
[09/07/14 18:49:03] Kirill Cherkashin: Ну здесь та же история, например параллализм (concurency) в джаве и в JS совсем вообще разные вещи и работает все совсем подругому
[09/07/14 18:49:25] Антон Шувалов: То есть, мой интерес — развить скиллы проектирования приложений
[09/07/14 18:49:42] Kirill Cherkashin: Просто когда пишут книгу про джаву многие мелочи, которые знакому любому джава разработчику остаются за кадром, тут дело не только в понимании синтаксиса
[09/07/14 18:49:51] Probably Kira: Стефанов "паттерны"?
[09/07/14 18:50:07] Probably Kira: я читала, неплохо.
[09/07/14 18:51:56] Alexey Migutsky: > То есть, мой интерес — развить скиллы проектирования приложений
Тока опыт и дядьки типа Фаулера
[09/07/14 18:52:54] Alexey Migutsky: У меня тоже такой интерес - многие ваще не понимают штойта и говорить про это не хотят/не могут :)
[09/07/14 18:52:57] Alexey Migutsky: статьи про такое обычно пишут люди, которые видели кучу таких систем и могут сравнивать
[09/07/14 18:53:03] Alexey Migutsky: а книг я вообще не знаю
[09/07/14 18:53:53] Alexey Migutsky: http://www.eaipatterns.com/
[09/07/14 18:53:59] Alexey Migutsky: тока вот это мб в тему
[09/07/14 18:54:08] Alexey Migutsky: но там надо делать скидку на интерпрайзность :)
[09/07/14 18:54:24] Kirill Cherkashin: http://www.insight-it.ru/highload/
[09/07/14 18:55:29] Alexey Migutsky: это не то чучуть, это обзор решений
[09/07/14 18:55:45] Alexey Migutsky: он мало что говорит о том, ПОЧЕМУ нужно делать и какие БЫЛИ альтернативы
[09/07/14 18:55:52] Alexey Migutsky: нету принятия решений, что крайне важно
[09/07/14 18:55:54] Alexey Migutsky: Хотя тоже тема :)
[09/07/14 18:56:11] Alexey Migutsky: Отдельные статьи ваще нищтяк
[09/07/14 18:57:49] Alexey Migutsky: Есть в загашнике ещё http://www.aosabook.org/en/index.html
[09/07/14 18:57:57] Alexey Migutsky: но пока не читал
[09/07/14 18:58:55] Kirill Cherkashin: прикольно, добавил на почитать
[09/07/14 18:58:56] Alexey Migutsky: Но тут опять же - хайлоад это дизайн систем, энтерпрайз интеграция - о том же
[09/07/14 18:59:32] Alexey Migutsky: А всякие там MVC vs MVVM и прочие Presentation Model и Monadic Parsers хрен в какой книге найдёшь
[09/07/14 18:59:40] Alexey Migutsky: и терминология - мама не горюй, у всех своя
[09/07/14 19:00:08] Alexey Migutsky: мне больше по душе Фаулер всё же в этом вопросе, у него хотя бы постоянство присутствует и он сам это всё анализировал
[09/07/14 19:00:29] Alexey Migutsky: в статьях периодически встречаются отсылки на других чуваков, но у них ничо толкового я не нашёл
[09/07/14 19:02:09] Alexey Migutsky: Есть ещё 
Bass, Len, Paul Clements, and Rick Kazman. Software Architecture in Practice, 2nd ed. Addison-Wesley Professional, 2003.
туда я вообще никогда не смотрел, но на них ссылаются мелкомягкие
[09/07/14 19:02:35] Alexey Migutsky: http://msdn.microsoft.com/en-us/library/ee658093.aspx
[09/07/14 19:02:58] Kirill Cherkashin: 10 лет книге
[09/07/14 19:03:03] Kirill Cherkashin: Как-то стремно
[09/07/14 19:03:16] Kirill Cherkashin: А, не вот 2009
[09/07/14 19:03:18] Kirill Cherkashin: второе издание
[09/07/14 19:03:51] Alexey Migutsky: ну тут такое
[09/07/14 19:04:06] Alexey Migutsky: архитектура UI вообще лет 30 назад зародилась
[09/07/14 19:04:11] Alexey Migutsky: и особо ничего не менялось  :)
[09/07/14 19:04:15] Alexey Migutsky: те же биндинги, но в другой форме
[09/07/14 19:04:51] Alexey Migutsky: Опять же, инфу по ним нарыть тяжело, особенно если не шаришь :)
[09/07/14 19:06:38] Alexey Migutsky: http://en.wikibooks.org/wiki/Introduction_to_Software_Engineering/Architecture
[09/07/14 19:07:12] Alexey Migutsky: раз уж пошла такая пьянка
[09/07/14 19:08:58] Alexey Migutsky: Но опять же, большинство таких книг и статей - про дизайн систем
[09/07/14 19:09:06] Alexey Migutsky: но не про то, как можно клёво компоновать свой код для простоты и красоты :)
[09/07/14 19:10:22] Alexey Migutsky: т.е. я вот промежуточного уровня между "как нам заставить два аппа работать вместе" и "как нам заставить две функции работать вместе" особо не наблюдаю
[09/07/14 19:12:31] Alexey Migutsky: Все эти чуваки просто вводят понятия "архитектуры" и "лоу левел дизайна"
[09/07/14 19:12:45] Alexey Migutsky: архитектура - это слои и сервисы и их интеграция
[09/07/14 19:12:55] Alexey Migutsky: а лоу левел - алгоритмы и "софтваре компоненты"
[09/07/14 19:13:12] Kirill Cherkashin: Просто слишком много разных мелочей по дороге и слишком малому количеству людей это реально нужно
[09/07/14 19:13:13] Alexey Migutsky: и всё
[09/07/14 19:13:20] Alexey Migutsky: имхо хуета какая-то
[09/07/14 19:13:46] Alexey Migutsky: нагуглить первое реально, нагуглить второе сложнее
[09/07/14 19:14:01] Alexey Migutsky: а нагуглить промежуточные варианты - ваще ололо
[09/07/14 19:14:23] Alexey Migutsky: такая вот бида :(
Если кто-то знает как решить - с радостью выслушаю
[09/07/14 19:14:44] Alexey Migutsky: > и слишком малому количеству людей это реально нужно
Я бы сказал слишком мало людей осознаёт значимость этих знаний
[09/07/14 19:14:52] Alexey Migutsky: ведь можно хуяк-хуяк
[09/07/14 19:14:59] Alexey Migutsky: а через 2 года на новый проект :)
[09/07/14 19:15:49] Kirill Cherkashin: Как решить, учиться самим и учить других
[09/07/14 19:17:11] Alexey Migutsky: Так я за всё время общения с программистами видел всего 3-4 человек, которые бы вообще проблематику понимали
[09/07/14 19:17:33] Alexey Migutsky: у всех остальных реакция типа "ууу, не, это оверинжениринг, о таком думать ну нафиг"
[09/07/14 19:17:48] Kirill Cherkashin: А сколько проектов ты видел, где это реально нужно было бы?
[09/07/14 19:19:22] Alexey Migutsky: все мои проекты, за редким исключением
[09/07/14 19:19:27] Alexey Migutsky: ровно с тех пор, как я научился различать понятия "разных абстрактных уровней"
[09/07/14 19:20:07] Alexey Migutsky: и плюс ко всему - проблема взаимодействия компонентов в коде (классы, иерархии классов, контрол флоу) встаёт вообще всегда
[09/07/14 19:20:48] Alexey Migutsky: основная проблема - как инкапсулировать так, чтобы оставались НУЖНЫЕ экстеншн поинты, и всё это без постоянного бойлерплейта
[09/07/14 19:20:57] Alexey Migutsky: это вообще всегда и всюду
[09/07/14 19:22:13] Kirill Cherkashin: Ну так напиши статью про это дело, я тебя поддержу с удовольствием
[09/07/14 19:26:54] Alexey Migutsky: так для того, чтобы написать статью - нужно утромбовать знания :)
[09/07/14 19:27:07] Alexey Migutsky: а у меня на этапе классификации уже проблемы
[09/07/14 19:27:34] Alexey Migutsky: плюс по собственному опыту - мыслить абстрактными категориями очень тяжело
[09/07/14 19:27:43] Alexey Migutsky: а уж обсуждать их - ваще хана
[09/07/14 19:31:11] Kirill Cherkashin: Поэтому придуманы примеры
[09/07/14 19:33:34] Kirill Cherkashin: Когда мне говорят "как инкапсулировать так, чтобы оставались НУЖНЫЕ экстеншн поинты, и всё это без постоянного бойлерплейта", я в целом понимаю, но как мне это в жизни поможет - не вижу, а вот если мне показать, как в каком-то фремворке благодаря конкретному решению остается в два раза меньше кода, и что это частный случай вышенаписанного, мне интересно
[09/07/14 19:37:06] Alexey Migutsky: Оно всем так
[09/07/14 19:37:39] Alexey Migutsky: Но я не могу просто придумать синтетический пример
[09/07/14 19:38:17] Kirill Cherkashin: Да, но у тебя же есть реальные проекты, где ты это применяешь
[09/07/14 19:38:20] Ksenia Redunova: Стоян Стефанов хорошо про паттерны написал
[09/07/14 19:38:21] Kirill Cherkashin: С реальными примерами
[09/07/14 19:38:22] Kirill Cherkashin: И у меня
[09/07/14 19:38:30] Alexey Migutsky: Обычно такие решения зависят и от домена, и от окружения
[09/07/14 19:38:53] Alexey Migutsky: А экстеншен поинты вообще уникальны, если тачка не общеупотребимая
[09/07/14 19:39:18] Alexey Migutsky: А на проекте я могу это коллеге объяснить
[09/07/14 19:39:26] Ksenia Redunova: насчет архитектуры JS приложений - есть хорошие доклады на эту тему, я сейчас навскидку дать ссылки не смогу, могу завтра скинуть.
[09/07/14 19:39:38] Alexey Migutsky: Но не могу его в паблик вытянуть
[09/07/14 19:40:15] Alexey Migutsky: Ксюша, буду благодарен
[09/07/14 19:40:26] Kirill Cherkashin: Ну надо обобщать
[09/07/14 19:40:40] Ksenia Redunova: если забуду, пишите в личку,  обязательно найду. Я давно этой темой интересуюсь.
[09/07/14 19:40:58] Kirill Cherkashin: http://vk.com/doc10903696_195353516?hash=b3f9f3790ee3d24f6b&dl=1387f01871e3631562
[09/07/14 19:41:18] Alexey Migutsky: Надо под это чатик, а то потеряемся
[09/07/14 19:41:25] Ksenia Redunova: просто год назад на эту тему читала доклад на Hotcode
[09/07/14 19:41:48] Ksenia Redunova: ну там простые паттерны, но в любом случае
[09/07/14 19:42:09] Alexey Migutsky: Обобщение и дает в результате вздутые паттерны и кучу оверинжиниринга
[09/07/14 19:43:25] Kirill Cherkashin: Ксения, видео есть?
[09/07/14 19:43:35] Alexey Migutsky: Доклады обычно дают представление о конкретной системе, но не показывают альтернатив
[09/07/14 19:46:51] Kirill Cherkashin: Обобщение обобщению рознь
[09/07/14 19:48:43] Kirill Cherkashin: Мы на прошлом проекте всей командой спорили о том, как должны взаимодействовать виды, и модели в бэкбоне, через месяц пришли к решению, оно подходит для нашего проекта, но я думаю что я смог бы обобщить это дело и выделить условия, при которых оно было бы полезно другим людям
[09/07/14 19:50:03] Alexey Migutsky: Да я много таких примеров видел, но в итоге все равно либо очень укзкую задачу решает, либо оверинжиниринг
[09/07/14 19:50:26] Ksenia Redunova: к сожалению, видео нет, есть только слайды доклада http://www.slideshare.net/redunova/javascript-design-patterns-overview
[09/07/14 19:50:50] Alexey Migutsky: В любой абстрактной системе важны принципы мышления
[09/07/14 19:51:19] Ksenia Redunova: но там про мега-архитектуру сложных приложений нет - тут надо отдельный доклад готовить, что в принципе входит в мои планы на будущее )
[09/07/14 19:51:22] Alexey Migutsky: А паттерны - лишь промежуточные шаги
[09/07/14 19:52:39] Alexey Migutsky: Вы про knowledge flow слышали, кстати?
[09/07/14 19:53:02] Alexey Migutsky: Оно же принцип наименьшего знания
[09/07/14 19:53:38] Alexey Migutsky: То, на чем якобы базируется devide and conquere
[09/07/14 19:54:12] Alexey Migutsky: Если да, то удалось ли это объяснить коллеге хоть раз внятно? :)
[09/07/14 19:54:32] Kirill Cherkashin: Ксения норм разложила, только  что в книге, что в слайдах непонятно причем там JSLint  между синглтонами и фабриками
[09/07/14 19:55:58] Kirill Cherkashin: Что-то меня knowledge flow отправляет в статью про сноудена
[09/07/14 20:37:07] Alexey Migutsky: А это не самый распространенный паттерн, я хз где я его откопал
[09/07/14 20:37:26] Alexey Migutsky: Least knowledge principle погугли
[09/07/14 21:19:53] Ksenia Redunova: ага, ну про JsLint это было лирическое отступление о том, что в народе называют "антипаттернами".
[09/07/14 21:20:13] Ksenia Redunova: там я перечислила несколько примеров плохих практик и способы борьбы с ними
[09/07/14 21:24:22] Антон Шувалов: А можно подробнее про knowledge flow?
[09/07/14 21:40:48] Kirill Cherkashin: А, это так же исвестно как Law of Demeter
[09/07/14 21:41:12] Kirill Cherkashin: Грубо говоря чем меньше других юнитов знает каждый отдельный юнит, тем лучше
[09/07/14 21:42:39] Антон Шувалов: Понял, с этим я знаком, только под термином «сцепление/связывание кода»
[09/07/14 21:42:49] Kirill Cherkashin: http://ru.wikipedia.org/wiki/%D0%97%D0%B0%D0%BA%D0%BE%D0%BD_%D0%94%D0%B5%D0%BC%D0%B5%D1%82%D1%80%D1%8B
[09/07/14 21:43:31] Kirill Cherkashin: Это не совсем оно, но это один из способов контролировать связывание, насколько я понимаю
[09/07/14 22:16:10] Alexey Migutsky: > А можно подробнее про knowledge flow?
Сорри, я от вас рано сбежал.

Я про это читал как про "поток знаний" в компоненте. 
> А, это так же исвестно как Law of Demeter
Это примерно он, но не совсем. 
Это действительно способ контроля связанности, который помогает о связях размышлять.

Связи представляют собой "поток знаний" о каждом компоненте с точки зрения программиста
[09/07/14 22:16:38] Alexey Migutsky: т.е. компоненты должны быть такими, чтобы программист не думал о том, где брать знания о компонентах
[09/07/14 22:17:17] Alexey Migutsky: грубо говоря, когда программист работает с одним компонентом - он в идеале должен находиться в очень сжатом контексте
[09/07/14 22:17:48] Alexey Migutsky: это касается как структуры на файловой системе, так и связей между компонентами, и ограничений самого фреймворка
[09/07/14 22:18:10] Alexey Migutsky: Сюда привязываются SRP, LoD и ещё пара принципов
[09/07/14 22:18:30] Ksenia Redunova: @patterns @паттерны 
вот нашла книги и ссылки на эту тему, именно по JS-паттернам:
Writing Maintainable JS (Nickolas Zakas) - есть еще видео его доклада с таким же названием на youtube
Patterns for Large-Scale JS Application Architecture (Addy Osmani)
Learning JS Design Patterns (Addy Osmani)
http://jsdesignpatterns.com
http://shichuan.github.io/javascript-patterns/
есть еще серия статей "Angry birds of JS" - там тоже было неплохо рассказано про паттерны
[09/07/14 22:19:00] Alexey Migutsky: т.е. при помощи вот этого knowledge flow удаётся одновременно контролировать поток данных, связи компонент, гранулярность и ряд других косвенных признаков хорошего кода
[09/07/14 22:19:19] Alexey Migutsky: Мы исходим из того, что компонент должен знать только о своих зависимостях через их интерфейсы, он знает, что ему нужно для реализации минимальной задачи
[09/07/14 22:19:33] Антон Шувалов: Patterns for Large-Scale JS Application Architecture (Addy Osmani) я перевел на русский
[09/07/14 22:19:46] Антон Шувалов: http://largescalejs.ru/
[09/07/14 22:20:12] Антон Шувалов: Это, как я понял, развитие идей Закаса.
[09/07/14 22:20:15] Alexey Migutsky: так вот, идея самого flow в том, что поток не должен "расширяться", или "растекаться"
[09/07/14 22:20:38] Alexey Migutsky: т.е. логика не должна размазываться, минимум копирования кода, максимум инкапсуляции
[09/07/14 22:20:44] Alexey Migutsky: и при расширении - затрагиваем минимум других компонент
[09/07/14 22:21:37] Alexey Migutsky: при этом паттерн мышления тут такой - вы думаете, как будет работать с вашим кодом другой человек, и откуда ему черпать знания о работе вашего компонента - это помогает держать компоненты максимально близко друг к другу.
[09/07/14 22:22:12] Alexey Migutsky: В идеале человек должен открыть одну папку и увидеть все составные части компонента
[09/07/14 22:22:35] Alexey Migutsky: а при работе с компонентом он не выходит за рамки одного файла
[09/07/14 22:23:11] Alexey Migutsky: Ну и получается такой постулат - клиент кода должен держать в памяти минимум знаний о компоненте, в иделе только то, что достаточно для работы самого компонента
[09/07/14 22:23:39] Alexey Migutsky: Я встречал такое описание всего пару раз, и точно не знаю где
[09/07/14 22:23:40] Alexey Migutsky: Частично оно упоминается вроде как в Чистом Коде
[09/07/14 22:24:41] Ksenia Redunova: Антон Шувалов, это просто супер! Хочу тебя поблагодарить за перевод такой важной книги!
[09/07/14 22:25:23] Alexey Migutsky: и получается мыслить примерно так: что должен знать этот компонент для реализации одной конкретной функции. Каждый такой "факт" можно выделить в другие компоненты, типа "поведения" или "состояния", которые соотв. знают только о состоянии, или только о поведении
[09/07/14 22:25:52] Антон Шувалов: :-)
[09/07/14 22:26:10] Alexey Migutsky: Антон, так ты после перевода должен нас всех консультировать :)
[09/07/14 22:26:59] Alexey Migutsky: > для реализации одной конкретной функции.
либо для выполнения конкретной роли - тут действует SRP
[09/07/14 22:28:05] Антон Шувалов: Ну, такую архитекруту я более-менее понимаю, а вот сила цепочки зависимостей для меня только недавно открылась, и мне очень интересно разобраться получше с возможностями и альтернативами тут.
[09/07/14 22:28:32] Alexey Migutsky: И "факты знаний" или "роли" компонента на разных уровнях абстракций могут слега отличаться. Т.е. в том же ангуляре - поведение в фреймворке той же директивы вполне конкретное, и не стоит раздувать эти знания, добавляя иное поведение - не стоит примешивать туда роль сервиса
[09/07/14 22:29:28] Alexey Migutsky: и когда вы работаете с директивой, на уровне взаимодействия компонент ангуляра вы 100% знаете как она работает - соответственно об этом факте можно "забыть", когда вы переходите к коду, который реализует логику директивы
[09/07/14 22:29:50] Alexey Migutsky: а на уровне логики - вы думаете только о логике, но не думаете как она влияет на поведение директивы в фреймворке
[09/07/14 22:30:21] Alexey Migutsky: Т.е. это чисто шаблон мышления, позволяющий контролировать практики в коде относительно простым способом
[09/07/14 22:30:35] Alexey Migutsky: избавляет код от магии и сайд эффектов
[09/07/14 22:30:48] Антон Шувалов: Алексей, кажется, очень просится крутая статья от тебя)
[09/07/14 22:31:01] Alexey Migutsky: тут же комментарии - если вы осознаёте, что вы делаете в коде "магию", то это знание нужно как-то закрепить
[09/07/14 22:31:11] Alexey Migutsky: самый простой способ - оставить коммент об этом знании
[09/07/14 22:31:15] Антон Шувалов: А то потом не найти в чате
[09/07/14 22:31:29] Alexey Migutsky: > очень просится крутая статья от тебя
Просится, но я не могу это просто так взять и сформулировать в читаемом виде :)
[09/07/14 22:31:34] Alexey Migutsky: не умею я ещё круто писать
[09/07/14 22:33:26] Alexey Migutsky: Так вот, в итоге мы имеем:
1. Наши компоненты состоят из "кусков знаний"
2. Таких кусков должно быть как можно меньше и они должны быть задокументированы в коде
3. Поток таких знаний через "границы" компонент должен быть минимальный
4. Знания со смежных уровней абстракции не должны пересекаться и зависеть друг от друга
[09/07/14 22:33:54] Alexey Migutsky: Тут вам и декларативность
[09/07/14 22:33:59] Alexey Migutsky: и ФП со своим отсутствием сайд-эффектов и наличием однозначных функций
[09/07/14 22:34:03] Alexey Migutsky: и SRP, и тыды и тыпы
[09/07/14 22:34:51] Alexey Migutsky: И большая проблема - как это объяснить? :)
Я могу этому обучить лично на примере, но не могу это нормально доходчиво объяснить
[09/07/14 22:35:19] Alexey Migutsky: практика показывает, что для такого подхода нужно пол года старательно менять паттерн мышления
[09/07/14 22:35:37] Alexey Migutsky: и есть одна большая проблема - контроль КОЛИЧЕСТВА компонент
[09/07/14 22:36:03] Alexey Migutsky: Есть бритва Оккама и всякие советы, предостерегающие о "плождении сущностей", типа YAGNI
[09/07/14 22:36:13] Alexey Migutsky: Так вот они с этим подходом не очень дружат
[09/07/14 22:36:21] Антон Шувалов: Вот, кстати, еще неплохая статья по архитектуре http://www.richardrodger.com/monolithic-nodejs
[09/07/14 22:36:58] Alexey Migutsky: плюс часто такой подход ведёт к генерализации решений - а это прямой путь к оверинженерингу
[09/07/14 22:38:24] Alexey Migutsky: Но зато есть большой ощутимый плюс - с таким подходом проще контролировать рефакторинг
[09/07/14 22:38:36] Alexey Migutsky: потому что рефакторинг - это "перетосовка знаний" в системе мышления
[09/07/14 22:38:59] Alexey Migutsky: т.е. если вы видите, что компоненту нужно знать много, или эти знания размазаны - собираете их вместе
[09/07/14 22:40:36] Alexey Migutsky: Плюс имеем три главных вопроса:
1. что? 
2. где?
3. как?

что? - что делает конкретный кусок знаний
где? - где это знание находится
как? - как это знание получить в данном месте

Каждый вопрос - это своеобразная независимая метрика, которую нужно уменьшать
[09/07/14 22:40:59] Alexey Migutsky: Т.е. ответ должен быть максимально однозначным - этот компонент делает то-то, лежит там-то и подключается так-то
[09/07/14 22:41:49] Alexey Migutsky: тут вам и DI, и структура на файловой системе и запрет дублирования функционала
[09/07/14 22:42:13] Антон Шувалов: Мне кажется, формат мышления, о котором ты говоришь очень естественный для программиста.
[09/07/14 22:42:13] Alexey Migutsky: DI вроде как имеет самый простой ответ на вопрос "как?" - мы просто объявляем зависимость и получаем компонент
[09/07/14 22:42:35] Антон Шувалов: В некоторых случаях, правда, полезно его формализовать и дополнить примерами.
[09/07/14 22:42:37] Alexey Migutsky: всё, никаких лишних знаний о путе или "местонахождении в скоупе" компонента
[09/07/14 22:42:59] Alexey Migutsky: > Мне кажется, формат мышления, о котором ты говоришь очень естественный для программиста.
И не только для программиста :)
[09/07/14 22:43:13] Alexey Migutsky: Но я реально за всё время слышал упоминание о потоке знаний всего пару раз
[09/07/14 22:43:33] Alexey Migutsky: и опять же - в форме такой же вот рефлексии, как сейчас происходит у меня :)
[09/07/14 22:43:40] Антон Шувалов: И, я думаю, это поможет тебе донести суть. Даже скорее конкретизировать и формализовать, потому что, как мне кажется, это и правда очеть естественно
[09/07/14 22:44:02] Alexey Migutsky: т.е. типа "вот есть набор правил, которые мы с вами знаем. И вот есть такой подход. И вот тут знания текут, а тут нет"
[09/07/14 22:44:27] Alexey Migutsky: Короче, пол статьи я тут уже написал :)
[09/07/14 22:45:02] Антон Шувалов: > потоке
я, правда, не совсем понял. Это ж системы
[09/07/14 22:45:32] Антон Шувалов: Типа, система состоит из набора систем более низкого уровня, которые при объединении дают системе новые свойства
[09/07/14 22:45:53] Антон Шувалов: И так можно уменьшать и уменьшать, до формальной системы
[09/07/14 22:46:21] Alexey Migutsky: а вот хз
[09/07/14 22:46:34] Alexey Migutsky: можно ли о системах в таком ключе размышлять
[09/07/14 22:47:05] Антон Шувалов: Не то? О системах достаточно много информации, как мне кажется. Может ты по неправильным терминам ориентируешься, и по этому не можешь найти информацию о потоке, когда это система? (если я правильно тебя понял)
[09/07/14 22:47:06] Alexey Migutsky: Тут, кстати, "протекание знаний" примерно равно "текучим абстракциям"
[09/07/14 22:47:11] Alexey Migutsky: но как я понял - не тоже самое
[09/07/14 22:47:16] Alexey Migutsky: или это просто я так понял :)
[09/07/14 22:47:39] Alexey Migutsky: > из набора систем более низкого уровня
вот фишка как раз в том, что на самом низком уровне у вас "неделимые факты"
[09/07/14 22:47:51] Антон Шувалов: Текучие абстракции — это, как мне кажется, эскалирование ошибки в системе
[09/07/14 22:48:15] Alexey Migutsky: т.е. в итоге да, для того, чтобы получить "скейляшееся решение" вам нужно сделать так, чтобы каждый компонент был "нелелимым хранилищем знаний" для клиента этого компонента
[09/07/14 22:48:59] Антон Шувалов: Когда ошибка в происходит в ее подсистеме (а может и ее подсистеме), и ты не опустившись вниз, до истинной причины проблемы, и не разобравшись в устройстве той подсистемы, в которой произошла проблема, не починишь надсистему?
[09/07/14 22:49:03] Alexey Migutsky: > это, как мне кажется, эскалирование ошибки в системе
не сомвсем, это о смешении слоёв абстракций
[09/07/14 22:49:36] Alexey Migutsky: грубо говоря, это нарушение того же LoD
[09/07/14 22:49:49] Антон Шувалов: > смешении слоёв абстракций
Я совершенно другой понимаю под законом текучих абстракций)
[09/07/14 22:49:54] Alexey Migutsky: когда мы инкапсулировали алгоритм в классе, но на уровне библиотеки всё равно стучимся к низкоуровневым методам
[09/07/14 22:50:13] Антон Шувалов: Хотя, сейчас задумался, правильно ли я вообще понимаю
[09/07/14 22:50:16] Kirill Cherkashin: Как-то слишком абстрактно
[09/07/14 22:50:49] Alexey Migutsky: http://en.wikipedia.org/wiki/Leaky_abstraction
[09/07/14 22:50:55] Alexey Migutsky: a leaky abstraction is an implemented abstraction where details and limitations of the implementation leak through
[09/07/14 22:51:20] Антон Шувалов: Черт, я даже представить боюсь, что бы было, если б такой разговор начался в пабе под пиво (rofl)
[09/07/14 22:52:19] Антон Шувалов: А, все понял про текучие абстракции
[09/07/14 22:52:38] Антон Шувалов: Но, тогда, проксирование параметров в компонент абстракции — текучесть?
[09/07/14 22:52:49] Alexey Migutsky: Ну, сложно найти людей которые под пиво не скажут "да ну нахуй, давай без этого" :)))
[09/07/14 22:53:16] Alexey Migutsky: > Как-то слишком абстрактно
О том и речь, что без примеров реальных это ОООООООЧЕНЬ тяжело понять и воспринять
[09/07/14 22:53:18] Alexey Migutsky: нету формализма
[09/07/14 22:53:24] Антон Шувалов: Да, я тоже замечал. Поэтому и забавно)
[09/07/14 22:54:34] Антон Шувалов: Ну вот смотри пример: есть плагин для гранта, который просто проксирует опции в модуль, который выполняет задачу. https://github.com/shuvalov-anton/grunt-clinch/blob/master/tasks/clinch.js#L83
[09/07/14 22:54:40] Антон Шувалов: Это протекающая абстракция?
[09/07/14 22:54:50] Alexey Migutsky: Собсно, вот термин, который ближе всего к понятию "знаний"
http://en.wikipedia.org/wiki/Modular_programming
[09/07/14 22:55:38] Alexey Migutsky: Только в таких вот определениях не понятно, что есть "single aspect of functionality"
[09/07/14 22:56:02] Антон Шувалов: Но, с другой стороны, я не скрываю его api за своим, и позволяю напрямуювзаимодействовать с его конфигурацией, а значит, в случае обновления компонента, новые опции будут поддерживаться дефакто
[09/07/14 22:56:25] Alexey Migutsky: но в modular programming понятие модуля больше, чем понятие "знания"
[09/07/14 22:57:40] Alexey Migutsky: > Это протекающая абстракция?
не совсем. Под протекающей абстракцией понимается то, что какое-то свойство системы, вроде как инкапсулированное, всё равно проявляется
[09/07/14 22:58:16] Alexey Migutsky: тут нет привязки к коду
[09/07/14 22:58:41] Alexey Migutsky: не знаю, как это лучше объяснить - отличное имхо объяснение в той же википедии - обход массива
[09/07/14 22:59:01] Alexey Migutsky: вроде как абстракция - набор ячеек M x N
[09/07/14 22:59:15] Alexey Migutsky: абстрагирует от программиста память
[09/07/14 22:59:35] Alexey Migutsky: но для эффективного обхода нужно знать, что обходить по "горизонтали" быстрее, из-за устройства памяти
[09/07/14 23:00:44] Alexey Migutsky: другими словами, знание о том, как устроена память попадает в определение массива
[09/07/14 23:01:24] Alexey Migutsky: для того, чтобы эту утечку прикрыть, нужно бы это "знание" о порядке обхода убрать в отдельное "поведение" - в метод "iterate", к примеру
[09/07/14 23:02:02] Kirill Cherkashin: Антон, я не думаю, что у тебя в плагине есть протекающая астракция, у тебя есть АПИ который имеет смысл, и юзеру не нужно знать что внутри
[09/07/14 23:02:06] Kirill Cherkashin: И как это работает
[09/07/14 23:03:31] Alexey Migutsky: > а значит, в случае обновления компонента, новые опции будут поддерживаться дефакто
Это текучая штука, так как ты даёшь доступ к внутрянке системы, которая закрыта проксёй.

Клиенту твоей прокси нужно знать, как устроен этот объект опций и за что он отвечает внутри скрытой за проксёй либы
[09/07/14 23:03:38] Alexey Migutsky: если ты поменяешь либу - хана опциям
[09/07/14 23:04:17] Alexey Migutsky: [7/9/14, 22:02:04] Kirill Cherkashin: и юзеру не нужно знать что внутри
[7/9/14, 22:02:08] Kirill Cherkashin: И как это работает

Так вот тут наоборот - если изменится проксируемая либа - юзеру хана
[09/07/14 23:04:46] Alexey Migutsky: потому что ему нужно менять передаваемые опции
[09/07/14 23:04:47] Alexey Migutsky: возникает вопрос - зачем ему новое знание о том, что делает прокси, если он должен знать, какой компонент ей закрыт?
[09/07/14 23:05:05] Alexey Migutsky: тут имеет смысл сделать адаптер, который будет трансформировать опции
[09/07/14 23:05:13] Alexey Migutsky: в простом варианте - сами в себя :)
[09/07/14 23:05:33] Alexey Migutsky: но в случае изменения апи проксируемого компонента - можно просто поменять адаптер
[09/07/14 23:05:55] Kirill Cherkashin: Я не очень внимательно смотрел, я так понял, что ты пишешь свой конфиг снаружи, и конфиг какой-то другой либы внтури, а плагин просто делает какой-то препроцессинг и дает либе результат
[09/07/14 23:05:58] Alexey Migutsky: у пользователя остаётся тот же объект настрок, а мы передаём в новую либу новый "проадаптированный" объект
[09/07/14 23:06:00] Антон Шувалов: Хорошая мысль, кстати
[09/07/14 23:06:11] Alexey Migutsky: прокси знает о конфиге либы
[09/07/14 23:06:17] Alexey Migutsky: клиент знает о конфиге прокси
[09/07/14 23:06:37] Kirill Cherkashin: Если я неправильно понял, то прошу прощения
[09/07/14 23:07:00] Alexey Migutsky: эти знания независимы - потому что ты разлелил понятия "конфиг либы" и "конфиг прокси"
[09/07/14 23:07:02] Антон Шувалов: Конфиг внутри — это дефорлтные параметры
[09/07/14 23:07:12] Alexey Migutsky: а до этого было понятие "конфиг либы И прокси"
[09/07/14 23:07:17] Антон Шувалов: Да, все правильно, вроде
[09/07/14 23:08:07] Alexey Migutsky: т.е. в один прекрасный момент времени интерфейсы объекта настроек могут совпадать - но они выполняют разные роли
