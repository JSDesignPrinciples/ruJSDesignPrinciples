[7/9/14, 9:56:42 AM] Антон Шувалов: @question Все больше сталкиваюсь с middlewares, в express, в loa, в page.js, и мне очень нравится такой подход. Подскажите, что полезного можно почитать по этой теме? Я так понимаю, это не просто паттерн, это какая-то архитектура. Подскажите, пожалуйста, ссылок или кейвордов для гугла, где можно о полезных архитектурных решениях почитать в принципе. Ну или ссылок на модули с крутой архитектурой.
[7/9/14, 9:57:37 AM] Alexey Migutsky: это паттерн Chain Of Responsibilities
[7/9/14, 9:57:55 AM] Alexey Migutsky: ну и его вариации :)
[7/9/14, 10:02:12 AM] Антон Шувалов: Спасибо! Заинтересовала тема паттернов, глядя как TJ ловко использует цепочку ответственности. А что можно почитать чтобы получить более-менее фундаментальное понимание этой темы? Стефанова? Такие паттерны называются «архитектурный паттерн», да?
[7/9/14, 10:03:21 AM] Alexey Migutsky: "с опытом" :)
[7/9/14, 10:03:33 AM] Alexey Migutsky: Надо как минимум пощупать несколько разных систем и, желательно, языков
[7/9/14, 10:03:36 AM] Alexey Migutsky: Почитать - хз что. Понимание этого всего приходит тупо после надрыва мозга
[7/9/14, 10:04:04 AM] Alexey Migutsky: я пока не встретил книгу, которая бы ок рассказывала про паттерны и нах они нужны, и как их грамотно применять, и тыды и тыпы
[7/9/14, 10:04:25 AM] Alexey Migutsky: имхо, это просто тренировка мозга на тему "как можно сделать лучше этот кусок кода"
[7/9/14, 10:04:35 AM] Андрей Листочкин: Да, он появился лет 20 назад на Перле, оттуда перекочевал в Джаву, потом руби, питон и наконец Нод
[7/9/14, 10:04:52 AM] Alexey Migutsky: Но если совсем не знакомы - то НЕ читайте GoF, а начните с каких-нить Head First Design Patterns
[7/9/14, 10:05:06 AM] Антон Шувалов: Я понимаю middlewares, но мне настолько это понравилось, когда я понял, что захотелось узнать, что еще есть похожего, классификацию и тд.
[7/9/14, 10:05:20 AM] Alexey Migutsky: Можно ещё Фаулера почитать, но там Содом и Гоморра
[7/9/14, 10:05:25 AM] Alexey Migutsky: зато архитектуры интересные и разные
[7/9/14, 10:05:32 AM] Андрей Листочкин: На Java ищи servlet filters - по идее должно быть инфы на эту тему
[7/9/14, 10:05:57 AM] Антон Шувалов: Понятно, спасибо :)
[7/9/14, 10:06:00 AM] Alexey Migutsky: > классификацию и тд.
Ну тут такое - классификация той же GoF зависит от парадигмы и большей частью основана на ООП и ООД
[7/9/14, 10:06:37 AM] Alexey Migutsky: в ЖСе функции - первородные "жители" языка
[7/9/14, 10:06:46 AM] Alexey Migutsky: что убивает часть паттернов ГоФ, потому что нах не нужны :)
[7/9/14, 10:06:57 AM] Alexey Migutsky: Архитектура во многом зависит от контекста
[7/9/14, 10:07:53 AM] Alexey Migutsky: В целом да, это архитектурные паттерны, и я по ним почитываю Фаулера - многобукаф, местами оч неоднозначно, но я пока не нашёл более менее вменяемого источника
[7/9/14, 10:08:55 AM] Alexey Migutsky: Плюс ко всему, некоторые паттерны отличаются незначительными деталями.
К примеру, чепочка ответственности не терминейтится, на скока я помню.
А миддлваре терминейтится - и это уже другой паттерн, но из того же семейства :)
[7/9/14, 10:09:53 AM] Nikita Butenko: Head First  про паттерны же вроде хорошо http://shop.oreilly.com/product/9780596007126.do
[7/9/14, 10:10:58 AM] Alexey Migutsky: я бы даже сказал "прекрасно", но мало :)
[7/9/14, 10:11:02 AM] Alexey Migutsky: и контекста маловато
[7/9/14, 10:11:48 AM] Alexey Migutsky: ну т.е. изучение паттернов имхо однозначно надо с хед ферст начинать
[7/9/14, 10:13:59 AM] Андрей Листочкин: Вообще один из хороших вариантов прокачаться в плане архитектуре - поискать что-то на эту тему в более старых платформах.

Хочешь знать, как делать масштабируемые системы?
- transaction servers
- Java EE
- Erlang

Хочешь прокачаться в плане архитектуры UI?
- Cocoa
- RAD
- .NET/Xaml

Интересна мобильная разработка?
- Symbian
- Java ME (андроид отсюда столько идей слизал - ууу)

Все конечно, нужно делить надвое - многие паттерны и идеи либо неприменимы сегодня в том виде, в котором их придумали изначально, либо вообще стали частью языков и платформ. Но в целом, история ходит по кругу - десять лет назад все кричали, что SOA в Java - это очень сложно и надо валить на Рельсы, а сегодня - что SOA в Рельсах - это сложно и надо валить на Ноду :)
[7/9/14, 10:14:04 AM] Антон Шувалов: А как вы читали? Перед сном? Или читали и пробовали сразу?
[7/9/14, 10:14:38 AM] Антон Шувалов: Если просто перед сном почитчывать, то стоит ждать эффект? Я хочу с чего-то обзорного начать сперва
[7/9/14, 10:15:39 AM] Антон Шувалов: Антон Шувалов не знает что такое SOA 0_0
[7/9/14, 10:17:20 AM] Evgeniy Kurtov: SOA с  рельсами действительно под большим вопросом
[7/9/14, 10:17:26 AM] Джон, просто Джон: Service Oriented Architecture
[7/9/14, 10:18:45 AM] Антон Шувалов: А, кажется немного понял: есть микро-паттерны, которые помогают писать рутинный код проще, типа, стратегии (?) и тд, есть более высокоуровневые паттерны, типа Chain of Responsibilities, которые определяют архитектуру фреймворков, и есть макро-паттерны на уровне языка/среды, которые определяют их возможности и класс задач, для которых они разрабатываются, правильно?
[7/9/14, 10:19:50 AM] Evgeniy Kurtov: пока понятно одно - MVC это лишь один из архитекутрных шаблонов и далеко не всегда выгодный
[7/9/14, 10:19:55 AM] Антон Шувалов: Head First даст мне хотя бы поверхностный обзор всех этих штук? Или лучше для этого начать с других книг, чтобы понять вообще, что мне нужно, и куда дальше копать?
[7/9/14, 10:20:43 AM] Alexey Migutsky: > Если просто перед сном почитчывать, то стоит ждать эффект? Я хочу с чего-то обзорного начать сперва
it depends от человека.
Я теоретик, мне норм заходит без практики, потому что я так привык.

Но лучше сразу пробовать
[7/9/14, 10:21:13 AM] Alexey Migutsky: > и класс задач, для которых они разрабатываются, правильно?
С языком не всё так просто, но в целом да :)
[7/9/14, 10:21:22 AM] Ivan Motiienko: On 7/9/14, at 10:20 AM, Антон Шувалов wrote:
> Head First
как раз хорош для въезжания
[7/9/14, 10:21:40 AM] Alexey Migutsky: Плюс у микро-паттернов и макро-паттернов своя классификация - типа "структурные паттерны", "паттерны создания всякой шняги", "паттерны дающие нужное поведение"
[7/9/14, 10:22:03 AM] Ivan Motiienko: но там все паттерны под жаву
[7/9/14, 10:22:20 AM] Alexey Migutsky: Макро-паттерны - это скорее к системным паттернам - всякие шины данных, организация флоу кода/данных, интеграция
[7/9/14, 10:23:01 AM] Антон Шувалов: Ага, классификация — одна из основных вещей, которые меня тут сейча интересуют
[7/9/14, 10:23:01 AM] Alexey Migutsky: > пока понятно одно - MVC это лишь один из архитекутрных шаблонов и далеко не всегда выгодный
MVC сам по себе далеееееекооооо не один шаблон, а "Самая Большая Ошибка Большинства Девелоперов"
[7/9/14, 10:23:02 AM] Sergey Koval (DymokSR): кто-нибудь работал с socket.io из objective c?
[7/9/14, 10:23:10 AM] Alexey Migutsky: потому что подвидов этого "МВЦ" существует ёбом, и дьявол в мелочах
[7/9/14, 10:23:27 AM] Alexey Migutsky: чего стоит тока MVC Model 2, который в джава мире в JSP
[7/9/14, 10:23:27 AM] Alexey Volkov: Alexey Volkov added re0ne.skype to this conversation
[7/9/14, 10:23:39 AM] Sergey Koval (DymokSR): в том плане, что насколько я понимаю, у socket.io свой протокол
[7/9/14, 10:23:45 AM] Alexey Migutsky: Сломал жизнь половине джавистов - они всё воспринимают сквозь призму модел2
[7/9/14, 10:23:59 AM] Sergey Koval (DymokSR): т.е. либо нужно реализовать работу с ним самому, либо уже есть готовая либа/класс/фреймворк
[7/9/14, 10:23:59 AM] Alexey Migutsky: > но там все паттерны под жаву
Под ООД скорее
[7/9/14, 10:24:05 AM] Антон Шувалов: А что скажите насчет «Идеального кода» и «Рефакторинга»? Посоветовали их еще почитать по паттернам. Да и давно в списке на чтение стоят
[7/9/14, 10:24:18 AM] Alexey Migutsky: > Ага, классификация — одна из основных вещей, которые меня тут сейча интересуют
Начни с Хэд Фёст, и потом по гуглу
[7/9/14, 10:24:39 AM] Alexey Migutsky: Я реально не знаю норм классификации на разных уровнях, и даже хз как это найти
[7/9/14, 10:24:40 AM] Sergey Koval (DymokSR): но у них совместимость до 0.9.х
[7/9/14, 10:24:56 AM] Sergey Koval (DymokSR): есть https://github.com/pkyeck/socket.IO-objc
[7/9/14, 10:25:00 AM] Alexey Migutsky: > т.е. либо нужно реализовать работу с ним самому, либо уже есть готовая либа/класс/фреймворк
Ищи готовые решения на гитхабе.
[7/9/14, 10:25:10 AM] Alexey Migutsky: СокетИО есть реализация под разные языки и окружения
[7/9/14, 10:25:15 AM] Alexey Migutsky: но тока с 1.0+ работать вряд ли будет
[7/9/14, 10:25:33 AM] Sergey Koval (DymokSR): у меня сейчас socket.io 1.0.6
[7/9/14, 10:25:34 AM] Alexey Migutsky: > но у них совместимость до 0.9.х
А с новыми сокетами никто щас работать и не будет - им пару месяцев от роду :)
[7/9/14, 10:26:27 AM] Sergey Koval (DymokSR): есть еще мысль uiwebview воспользоваться :)
[7/9/14, 10:27:56 AM] Alexey Migutsky: ну можно поковырять
[7/9/14, 10:28:00 AM] Alexey Migutsky: там приоритет транспортов сменился
[7/9/14, 10:28:04 AM] Alexey Migutsky: апи вроде как компэтибл
[7/9/14, 10:28:12 AM] Alexey Migutsky: ну по крайней мере слой совместимости я там видел краем глаза
[7/9/14, 10:43:53 AM] Kirill Cherkashin: Вот хочу насчет паттернов от себя вставить: я читал читал все эти книги и не мог воткнуть, че они все от меня хотят и зачем это нужно, а потом сел за Java и сразу стало многое ясно, а паттерны - частью общения, когда ты это используешь и понимаешь что и зачем, намного проще объяснить деву рядом с тобой, что ты сделал фабрику для того-то и того-то
[7/9/14, 10:44:53 AM] Kirill Cherkashin: Но многие паттерны в джаве тупо призваны решить проблемы языка, например в джаве до недавнего функции не были объектами первого класса, у них для этого стратегии, в JS стратегии тоже можно использовать, но совсем другой юз кейс
[7/9/14, 10:45:21 AM] Kirill Cherkashin: Поэтому если читать про паттерны в Джаве, надо писать на джаве, иначе намного сложнее будет разабраться
[7/9/14, 10:46:12 AM] Антон Шувалов: Ну, эта часть меня интересует несколько меньше, чем построение гибкой и масштабируемой архитектуры (не знаю, вообще, возможно ли такое).
[7/9/14, 10:47:55 AM] Антон Шувалов: И, да, про язык согласен. Читал «Программист-прагматик» с примерами на java/smalltalk и не во все понимал. Примеры хочется по js.
[7/9/14, 10:48:29 AM] Антон Шувалов: Вспоминается только Стоян Стефанов. Вот стоит, интересно, его читать? Я бегло смотрел первую треть, очень многое мне давно знакомо.
[7/9/14, 10:48:56 AM] Kirill Cherkashin: Ну здесь та же история, например параллализм (concurency) в джаве и в JS совсем вообще разные вещи и работает все совсем подругому
[7/9/14, 10:49:10 AM] Антон Шувалов: чейнинги через `return this;` в методах не особенно интересуют, я в такие «паттерны» уже умею, вроде
[7/9/14, 10:49:28 AM] Антон Шувалов: То есть, мой интерес — развить скиллы проектирования приложений
[7/9/14, 10:49:36 AM] Kirill Cherkashin: Просто когда пишут книгу про джаву многие мелочи, которые знакому любому джава разработчику остаются за кадром, тут дело не только в понимании синтаксиса
[7/9/14, 10:49:49 AM] Probably Kira: Стефанов "паттерны"?
[7/9/14, 10:49:58 AM] Probably Kira: я читала, неплохо.
[7/9/14, 10:51:56 AM] Alexey Migutsky: > То есть, мой интерес — развить скиллы проектирования приложений
Тока опыт и дядьки типа Фаулера
[7/9/14, 10:52:55 AM] Alexey Migutsky: У меня тоже такой интерес - многие ваще не понимают штойта и говорить про это не хотят/не могут :)
[7/9/14, 10:53:10 AM] Alexey Migutsky: статьи про такое обычно пишут люди, которые видели кучу таких систем и могут сравнивать
[7/9/14, 10:53:14 AM] Alexey Migutsky: а книг я вообще не знаю
[7/9/14, 10:53:56 AM] Alexey Migutsky: http://www.eaipatterns.com/
[7/9/14, 10:54:06 AM] Alexey Migutsky: тока вот это мб в тему
[7/9/14, 10:54:09 AM] Alexey Migutsky: но там надо делать скидку на интерпрайзность :)
[7/9/14, 10:54:18 AM] Kirill Cherkashin: http://www.insight-it.ru/highload/
[7/9/14, 10:55:30 AM] Alexey Migutsky: это не то чучуть, это обзор решений
[7/9/14, 10:55:38 AM] Alexey Migutsky: он мало что говорит о том, ПОЧЕМУ нужно делать и какие БЫЛИ альтернативы
[7/9/14, 10:55:45 AM] Alexey Migutsky: нету принятия решений, что крайне важно
[7/9/14, 10:55:49 AM] Alexey Migutsky: Хотя тоже тема :)
[7/9/14, 10:56:07 AM] Alexey Migutsky: Отдельные статьи ваще нищтяк
[7/9/14, 10:57:51 AM] Alexey Migutsky: Есть в загашнике ещё http://www.aosabook.org/en/index.html
[7/9/14, 10:57:58 AM] Alexey Migutsky: но пока не читал
[7/9/14, 10:58:50 AM] Kirill Cherkashin: прикольно, добавил на почитать
[7/9/14, 10:58:51 AM] Alexey Migutsky: Но тут опять же - хайлоад это дизайн систем, энтерпрайз интеграция - о том же
[7/9/14, 10:59:28 AM] Alexey Migutsky: А всякие там MVC vs MVVM и прочие Presentation Model и Monadic Parsers хрен в какой книге найдёшь
[7/9/14, 10:59:36 AM] Alexey Migutsky: и терминология - мама не горюй, у всех своя
[7/9/14, 11:00:03 AM] Alexey Migutsky: мне больше по душе Фаулер всё же в этом вопросе, у него хотя бы постоянство присутствует и он сам это всё анализировал
[7/9/14, 11:00:29 AM] Alexey Migutsky: в статьях периодически встречаются отсылки на других чуваков, но у них ничо толкового я не нашёл
[7/9/14, 11:02:09 AM] Alexey Migutsky: Есть ещё 
Bass, Len, Paul Clements, and Rick Kazman. Software Architecture in Practice, 2nd ed. Addison-Wesley Professional, 2003.
туда я вообще никогда не смотрел, но на них ссылаются мелкомягкие
[7/9/14, 11:02:31 AM] Alexey Migutsky: http://msdn.microsoft.com/en-us/library/ee658093.aspx
[7/9/14, 11:02:55 AM] Kirill Cherkashin: 10 лет книге
[7/9/14, 11:03:00 AM] Kirill Cherkashin: Как-то стремно
[7/9/14, 11:03:13 AM] Kirill Cherkashin: А, не вот 2009
[7/9/14, 11:03:15 AM] Kirill Cherkashin: второе издание
[7/9/14, 11:03:51 AM] Alexey Migutsky: ну тут такое
[7/9/14, 11:04:08 AM] Alexey Migutsky: архитектура UI вообще лет 30 назад зародилась
[7/9/14, 11:04:13 AM] Alexey Migutsky: и особо ничего не менялось  :)
[7/9/14, 11:04:23 AM] Alexey Migutsky: те же биндинги, но в другой форме
[7/9/14, 11:04:52 AM] Alexey Migutsky: Опять же, инфу по ним нарыть тяжело, особенно если не шаришь :)
[7/9/14, 11:06:40 AM] Alexey Migutsky: http://en.wikibooks.org/wiki/Introduction_to_Software_Engineering/Architecture
[7/9/14, 11:07:09 AM] Alexey Migutsky: раз уж пошла такая пьянка
[7/9/14, 11:08:55 AM] Alexey Migutsky: Но опять же, большинство таких книг и статей - про дизайн систем
[7/9/14, 11:09:11 AM] Alexey Migutsky: но не про то, как можно клёво компоновать свой код для простоты и красоты :)
[7/9/14, 11:10:23 AM] Alexey Migutsky: т.е. я вот промежуточного уровня между "как нам заставить два аппа работать вместе" и "как нам заставить две функции работать вместе" особо не наблюдаю
[7/9/14, 11:12:31 AM] Alexey Migutsky: Все эти чуваки просто вводят понятия "архитектуры" и "лоу левел дизайна"
[7/9/14, 11:12:44 AM] Alexey Migutsky: архитектура - это слои и сервисы и их интеграция
[7/9/14, 11:12:57 AM] Alexey Migutsky: а лоу левел - алгоритмы и "софтваре компоненты"
[7/9/14, 11:13:04 AM] Kirill Cherkashin: Просто слишком много разных мелочей по дороге и слишком малому количеству людей это реально нужно
[7/9/14, 11:13:16 AM] Alexey Migutsky: и всё
[7/9/14, 11:13:20 AM] Alexey Migutsky: имхо хуета какая-то
[7/9/14, 11:13:51 AM] Alexey Migutsky: нагуглить первое реально, нагуглить второе сложнее
[7/9/14, 11:14:01 AM] Alexey Migutsky: а нагуглить промежуточные варианты - ваще ололо
[7/9/14, 11:14:22 AM] Alexey Migutsky: такая вот бида :(
Если кто-то знает как решить - с радостью выслушаю
[7/9/14, 11:14:48 AM] Alexey Migutsky: > и слишком малому количеству людей это реально нужно
Я бы сказал слишком мало людей осознаёт значимость этих знаний
[7/9/14, 11:14:57 AM] Alexey Migutsky: ведь можно хуяк-хуяк
[7/9/14, 11:14:59 AM] Alexey Migutsky: а через 2 года на новый проект :)
[7/9/14, 11:15:46 AM] Kirill Cherkashin: Как решить, учиться самим и учить других
[7/9/14, 11:17:08 AM] Alexey Migutsky: Так я за всё время общения с программистами видел всего 3-4 человек, которые бы вообще проблематику понимали
[7/9/14, 11:17:29 AM] Alexey Migutsky: у всех остальных реакция типа "ууу, не, это оверинжениринг, о таком думать ну нафиг"
[7/9/14, 11:17:41 AM] Kirill Cherkashin: А сколько проектов ты видел, где это реально нужно было бы?
[7/9/14, 11:19:04 AM] Alexey Migutsky: все мои проекты, за редким исключением
[7/9/14, 11:19:24 AM] Alexey Migutsky: ровно с тех пор, как я научился различать понятия "разных абстрактных уровней"
[7/9/14, 11:20:09 AM] Alexey Migutsky: и плюс ко всему - проблема взаимодействия компонентов в коде (классы, иерархии классов, контрол флоу) встаёт вообще всегда
[7/9/14, 11:20:48 AM] Alexey Migutsky: основная проблема - как инкапсулировать так, чтобы оставались НУЖНЫЕ экстеншн поинты, и всё это без постоянного бойлерплейта
[7/9/14, 11:20:56 AM] Alexey Migutsky: это вообще всегда и всюду
[7/9/14, 11:22:02 AM] Kirill Cherkashin: Ну так напиши статью про это дело, я тебя поддержу с удовольствием
[7/9/14, 11:26:54 AM] Alexey Migutsky: так для того, чтобы написать статью - нужно утромбовать знания :)
[7/9/14, 11:27:12 AM] Alexey Migutsky: а у меня на этапе классификации уже проблемы
[7/9/14, 11:27:31 AM] Alexey Migutsky: плюс по собственному опыту - мыслить абстрактными категориями очень тяжело
[7/9/14, 11:27:39 AM] Alexey Migutsky: а уж обсуждать их - ваще хана
[7/9/14, 11:31:09 AM] Kirill Cherkashin: Поэтому придуманы примеры
[7/9/14, 11:33:34 AM] Kirill Cherkashin: Когда мне говорят "как инкапсулировать так, чтобы оставались НУЖНЫЕ экстеншн поинты, и всё это без постоянного бойлерплейта", я в целом понимаю, но как мне это в жизни поможет - не вижу, а вот если мне показать, как в каком-то фремворке благодаря конкретному решению остается в два раза меньше кода, и что это частный случай вышенаписанного, мне интересно
[7/9/14, 11:37:07 AM] Alexey Migutsky: Оно всем так
[7/9/14, 11:37:30 AM] Alexey Migutsky: Но я не могу просто придумать синтетический пример
[7/9/14, 11:38:15 AM] Kirill Cherkashin: Да, но у тебя же есть реальные проекты, где ты это применяешь
[7/9/14, 11:38:17 AM] Ksenia Redunova: Стоян Стефанов хорошо про паттерны написал
[7/9/14, 11:38:19 AM] Kirill Cherkashin: С реальными примерами
[7/9/14, 11:38:20 AM] Kirill Cherkashin: И у меня
[7/9/14, 11:38:26 AM] Alexey Migutsky: Обычно такие решения зависят и от домена, и от окружения
[7/9/14, 11:38:53 AM] Alexey Migutsky: А экстеншен поинты вообще уникальны, если тачка не общеупотребимая
[7/9/14, 11:39:21 AM] Ksenia Redunova: насчет архитектуры JS приложений - есть хорошие доклады на эту тему, я сейчас навскидку дать ссылки не смогу, могу завтра скинуть.
[7/9/14, 11:39:23 AM] Alexey Migutsky: А на проекте я могу это коллеге объяснить
[7/9/14, 11:39:34 AM] Alexey Migutsky: Но не могу его в паблик вытянуть
[7/9/14, 11:40:11 AM] Alexey Migutsky: Ксюша, буду благодарен
[7/9/14, 11:40:18 AM] Kirill Cherkashin: Ну надо обобщать
[7/9/14, 11:40:34 AM] Ksenia Redunova: если забуду, пишите в личку,  обязательно найду. Я давно этой темой интересуюсь.
[7/9/14, 11:40:54 AM] Kirill Cherkashin: http://vk.com/doc10903696_195353516?hash=b3f9f3790ee3d24f6b&dl=1387f01871e3631562
[7/9/14, 11:41:14 AM] Alexey Migutsky: Надо под это чатик, а то потеряемся
[7/9/14, 11:41:25 AM] Ksenia Redunova: просто год назад на эту тему читала доклад на Hotcode
[7/9/14, 11:41:44 AM] Ksenia Redunova: ну там простые паттерны, но в любом случае
[7/9/14, 11:41:57 AM] Alexey Migutsky: Обобщение и дает в результате вздутые паттерны и кучу оверинжиниринга
[7/9/14, 11:43:18 AM] Kirill Cherkashin: Ксения, видео есть?
[7/9/14, 11:43:36 AM] Alexey Migutsky: Доклады обычно дают представление о конкретной системе, но не показывают альтернатив
[7/9/14, 11:46:47 AM] Kirill Cherkashin: Обобщение обобщению рознь
[7/9/14, 11:48:38 AM] Kirill Cherkashin: Мы на прошлом проекте всей командой спорили о том, как должны взаимодействовать виды, и модели в бэкбоне, через месяц пришли к решению, оно подходит для нашего проекта, но я думаю что я смог бы обобщить это дело и выделить условия, при которых оно было бы полезно другим людям
[7/9/14, 11:50:04 AM] Alexey Migutsky: Да я много таких примеров видел, но в итоге все равно либо очень укзкую задачу решает, либо оверинжиниринг
[7/9/14, 11:50:33 AM] Ksenia Redunova: к сожалению, видео нет, есть только слайды доклада http://www.slideshare.net/redunova/javascript-design-patterns-overview
[7/9/14, 11:50:49 AM] Alexey Migutsky: В любой абстрактной системе важны принципы мышления
[7/9/14, 11:51:10 AM] Alexey Migutsky: А паттерны - лишь промежуточные шаги
[7/9/14, 11:51:17 AM] Ksenia Redunova: но там про мега-архитектуру сложных приложений нет - тут надо отдельный доклад готовить, что в принципе входит в мои планы на будущее )
[7/9/14, 11:52:43 AM] Alexey Migutsky: Вы про knowledge flow слышали, кстати?
[7/9/14, 11:52:56 AM] Alexey Migutsky: Оно же принцип наименьшего знания
[7/9/14, 11:53:35 AM] Alexey Migutsky: То, на чем якобы базируется devide and conquere
[7/9/14, 11:54:08 AM] Alexey Migutsky: Если да, то удалось ли это объяснить коллеге хоть раз внятно? :)
[7/9/14, 11:54:31 AM] Kirill Cherkashin: Ксения норм разложила, только  что в книге, что в слайдах непонятно причем там JSLint  между синглтонами и фабриками
[7/9/14, 11:55:38 AM] Kirill Cherkashin: Что-то меня knowledge flow отправляет в статью про сноудена
[7/9/14, 12:37:01 PM] Alexey Migutsky: А это не самый распространенный паттерн, я хз где я его откопал
[7/9/14, 12:37:18 PM] Alexey Migutsky: Least knowledge principle погугли
[7/9/14, 1:19:53 PM] katidotk: ага, ну про JsLint это было лирическое отступление о том, что в народе называют "антипаттернами".
[7/9/14, 1:20:13 PM] katidotk: там я перечислила несколько примеров плохих практик и способы борьбы с ними
[7/9/14, 1:24:23 PM] anton_shuvalov: А можно подробнее про knowledge flow?
[7/9/14, 1:40:47 PM] Kirill Cherkashin: А, это так же исвестно как Law of Demeter
[7/9/14, 1:41:12 PM] Kirill Cherkashin: Грубо говоря чем меньше других юнитов знает каждый отдельный юнит, тем лучше
[7/9/14, 1:42:40 PM] anton_shuvalov: Понял, с этим я знаком, только под термином «сцепление/связывание кода»
[7/9/14, 1:42:43 PM] Kirill Cherkashin: http://ru.wikipedia.org/wiki/%D0%97%D0%B0%D0%BA%D0%BE%D0%BD_%D0%94%D0%B5%D0%BC%D0%B5%D1%82%D1%80%D1%8B
[7/9/14, 1:43:10 PM] Kirill Cherkashin: Это не совсем оно, но это один из способов контролировать связывание, насколько я понимаю
[7/9/14, 2:16:12 PM] Alexey Migutsky: > А можно подробнее про knowledge flow?
Сорри, я от вас рано сбежал.

Я про это читал как про "поток знаний" в компоненте. 
> А, это так же исвестно как Law of Demeter
Это примерно он, но не совсем. 
Это действительно способ контроля связанности, который помогает о связях размышлять.

Связи представляют собой "поток знаний" о каждом компоненте с точки зрения программиста
[7/9/14, 2:16:40 PM] Alexey Migutsky: т.е. компоненты должны быть такими, чтобы программист не думал о том, где брать знания о компонентах
[7/9/14, 2:17:18 PM] Alexey Migutsky: грубо говоря, когда программист работает с одним компонентом - он в идеале должен находиться в очень сжатом контексте
[7/9/14, 2:17:49 PM] Alexey Migutsky: это касается как структуры на файловой системе, так и связей между компонентами, и ограничений самого фреймворка
[7/9/14, 2:17:56 PM] Alexey Migutsky: Сюда привязываются SRP, LoD и ещё пара принципов
[7/9/14, 2:18:34 PM] katidotk: @patterns @паттерны 
вот нашла книги и ссылки на эту тему, именно по JS-паттернам:
Writing Maintainable JS (Nickolas Zakas) - есть еще видео его доклада с таким же названием на youtube
Patterns for Large-Scale JS Application Architecture (Addy Osmani)
Learning JS Design Patterns (Addy Osmani)
http://jsdesignpatterns.com
http://shichuan.github.io/javascript-patterns/
есть еще серия статей "Angry birds of JS" - там тоже было неплохо рассказано про паттерны
[7/9/14, 2:18:58 PM] Alexey Migutsky: т.е. при помощи вот этого knowledge flow удаётся одновременно контролировать поток данных, связи компонент, гранулярность и ряд других косвенных признаков хорошего кода
[7/9/14, 2:19:20 PM] Alexey Migutsky: Мы исходим из того, что компонент должен знать только о своих зависимостях через их интерфейсы, он знает, что ему нужно для реализации минимальной задачи
[7/9/14, 2:19:35 PM] Антон Шувалов: Patterns for Large-Scale JS Application Architecture (Addy Osmani) я перевел на русский
[7/9/14, 2:19:55 PM] Антон Шувалов: http://largescalejs.ru/
[7/9/14, 2:20:16 PM] Alexey Migutsky: так вот, идея самого flow в том, что поток не должен "расширяться", или "растекаться"
[7/9/14, 2:20:20 PM] Антон Шувалов: Это, как я понял, развитие идей Закаса.
[7/9/14, 2:20:43 PM] Alexey Migutsky: т.е. логика не должна размазываться, минимум копирования кода, максимум инкапсуляции
[7/9/14, 2:20:51 PM] Alexey Migutsky: и при расширении - затрагиваем минимум других компонент
[7/9/14, 2:21:39 PM] Alexey Migutsky: при этом паттерн мышления тут такой - вы думаете, как будет работать с вашим кодом другой человек, и откуда ему черпать знания о работе вашего компонента - это помогает держать компоненты максимально близко друг к другу.
[7/9/14, 2:22:06 PM] Alexey Migutsky: В идеале человек должен открыть одну папку и увидеть все составные части компонента
[7/9/14, 2:22:14 PM] Alexey Migutsky: а при работе с компонентом он не выходит за рамки одного файла
[7/9/14, 2:23:06 PM] Alexey Migutsky: Ну и получается такой постулат - клиент кода должен держать в памяти минимум знаний о компоненте, в иделе только то, что достаточно для работы самого компонента
[7/9/14, 2:23:38 PM] Alexey Migutsky: Я встречал такое описание всего пару раз, и точно не знаю где
[7/9/14, 2:23:40 PM] Alexey Migutsky: Частично оно упоминается вроде как в Чистом Коде
[7/9/14, 2:24:42 PM] katidotk: Антон Шувалов, это просто супер! Хочу тебя поблагодарить за перевод такой важной книги!
[7/9/14, 2:25:23 PM] Alexey Migutsky: и получается мыслить примерно так: что должен знать этот компонент для реализации одной конкретной функции. Каждый такой "факт" можно выделить в другие компоненты, типа "поведения" или "состояния", которые соотв. знают только о состоянии, или только о поведении
[7/9/14, 2:25:52 PM] Антон Шувалов: :-)
[7/9/14, 2:26:11 PM] Alexey Migutsky: Антон, так ты после перевода должен нас всех консультировать :)
[7/9/14, 2:26:59 PM] Alexey Migutsky: > для реализации одной конкретной функции.
либо для выполнения конкретной роли - тут действует SRP
[7/9/14, 2:28:06 PM] Антон Шувалов: Ну, такую архитекруту я более-менее понимаю, а вот сила цепочки зависимостей для меня только недавно открылась, и мне очень интересно разобраться получше с возможностями и альтернативами тут.
[7/9/14, 2:28:35 PM] Alexey Migutsky: И "факты знаний" или "роли" компонента на разных уровнях абстракций могут слега отличаться. Т.е. в том же ангуляре - поведение в фреймворке той же директивы вполне конкретное, и не стоит раздувать эти знания, добавляя иное поведение - не стоит примешивать туда роль сервиса
[7/9/14, 2:29:26 PM] Alexey Migutsky: и когда вы работаете с директивой, на уровне взаимодействия компонент ангуляра вы 100% знаете как она работает - соответственно об этом факте можно "забыть", когда вы переходите к коду, который реализует логику директивы
[7/9/14, 2:29:51 PM] Alexey Migutsky: а на уровне логики - вы думаете только о логике, но не думаете как она влияет на поведение директивы в фреймворке
[7/9/14, 2:30:17 PM] Alexey Migutsky: Т.е. это чисто шаблон мышления, позволяющий контролировать практики в коде относительно простым способом
[7/9/14, 2:30:37 PM] Alexey Migutsky: избавляет код от магии и сайд эффектов
[7/9/14, 2:30:50 PM] Антон Шувалов: Алексей, кажется, очень просится крутая статья от тебя)
[7/9/14, 2:31:06 PM] Alexey Migutsky: тут же комментарии - если вы осознаёте, что вы делаете в коде "магию", то это знание нужно как-то закрепить
[7/9/14, 2:31:17 PM] Антон Шувалов: А то потом не найти в чате
[7/9/14, 2:31:18 PM] Alexey Migutsky: самый простой способ - оставить коммент об этом знании
[7/9/14, 2:31:26 PM] Alexey Migutsky: > очень просится крутая статья от тебя
Просится, но я не могу это просто так взять и сформулировать в читаемом виде :)
[7/9/14, 2:31:31 PM] Alexey Migutsky: не умею я ещё круто писать
[7/9/14, 2:33:27 PM] Alexey Migutsky: Так вот, в итоге мы имеем:
1. Наши компоненты состоят из "кусков знаний"
2. Таких кусков должно быть как можно меньше и они должны быть задокументированы в коде
3. Поток таких знаний через "границы" компонент должен быть минимальный
4. Знания со смежных уровней абстракции не должны пересекаться и зависеть друг от друга
[7/9/14, 2:33:44 PM] Alexey Migutsky: Тут вам и декларативность
[7/9/14, 2:34:04 PM] Alexey Migutsky: и ФП со своим отсутствием сайд-эффектов и наличием однозначных функций
[7/9/14, 2:34:08 PM] Alexey Migutsky: и SRP, и тыды и тыпы
[7/9/14, 2:34:58 PM] Alexey Migutsky: И большая проблема - как это объяснить? :)
Я могу этому обучить лично на примере, но не могу это нормально доходчиво объяснить
[7/9/14, 2:35:13 PM] Alexey Migutsky: практика показывает, что для такого подхода нужно пол года старательно менять паттерн мышления
[7/9/14, 2:35:44 PM] Alexey Migutsky: и есть одна большая проблема - контроль КОЛИЧЕСТВА компонент
[7/9/14, 2:36:02 PM] Alexey Migutsky: Есть бритва Оккама и всякие советы, предостерегающие о "плождении сущностей", типа YAGNI
[7/9/14, 2:36:10 PM] Alexey Migutsky: Так вот они с этим подходом не очень дружат
[7/9/14, 2:36:44 PM] Антон Шувалов: Вот, кстати, еще неплохая статья по архитектуре http://www.richardrodger.com/monolithic-nodejs
[7/9/14, 2:37:01 PM] Alexey Migutsky: плюс часто такой подход ведёт к генерализации решений - а это прямой путь к оверинженерингу
[7/9/14, 2:38:23 PM] Alexey Migutsky: Но зато есть большой ощутимый плюс - с таким подходом проще контролировать рефакторинг
[7/9/14, 2:38:38 PM] Alexey Migutsky: потому что рефакторинг - это "перетосовка знаний" в системе мышления
[7/9/14, 2:38:58 PM] Alexey Migutsky: т.е. если вы видите, что компоненту нужно знать много, или эти знания размазаны - собираете их вместе
[7/9/14, 2:40:37 PM] Alexey Migutsky: Плюс имеем три главных вопроса:
1. что? 
2. где?
3. как?

что? - что делает конкретный кусок знаний
где? - где это знание находится
как? - как это знание получить в данном месте

Каждый вопрос - это своеобразная независимая метрика, которую нужно уменьшать
[7/9/14, 2:41:00 PM] Alexey Migutsky: Т.е. ответ должен быть максимально однозначным - этот компонент делает то-то, лежит там-то и подключается так-то
[7/9/14, 2:41:33 PM] Alexey Migutsky: тут вам и DI, и структура на файловой системе и запрет дублирования функционала
[7/9/14, 2:42:13 PM] Alexey Migutsky: DI вроде как имеет самый простой ответ на вопрос "как?" - мы просто объявляем зависимость и получаем компонент
[7/9/14, 2:42:15 PM] Антон Шувалов: Мне кажется, формат мышления, о котором ты говоришь очень естественный для программиста.
[7/9/14, 2:42:37 PM] Антон Шувалов: В некоторых случаях, правда, полезно его формализовать и дополнить примерами.
[7/9/14, 2:42:40 PM] Alexey Migutsky: всё, никаких лишних знаний о путе или "местонахождении в скоупе" компонента
[7/9/14, 2:43:05 PM] Alexey Migutsky: > Мне кажется, формат мышления, о котором ты говоришь очень естественный для программиста.
И не только для программиста :)
[7/9/14, 2:43:13 PM] Alexey Migutsky: Но я реально за всё время слышал упоминание о потоке знаний всего пару раз
[7/9/14, 2:43:34 PM] Alexey Migutsky: и опять же - в форме такой же вот рефлексии, как сейчас происходит у меня :)
[7/9/14, 2:43:43 PM] Антон Шувалов: И, я думаю, это поможет тебе донести суть. Даже скорее конкретизировать и формализовать, потому что, как мне кажется, это и правда очеть естественно
[7/9/14, 2:44:01 PM] Alexey Migutsky: т.е. типа "вот есть набор правил, которые мы с вами знаем. И вот есть такой подход. И вот тут знания текут, а тут нет"
[7/9/14, 2:44:51 PM] Alexey Migutsky: Короче, пол статьи я тут уже написал :)
[7/9/14, 2:45:03 PM] Антон Шувалов: > потоке
я, правда, не совсем понял. Это ж системы
[7/9/14, 2:45:35 PM] Антон Шувалов: Типа, система состоит из набора систем более низкого уровня, которые при объединении дают системе новые свойства
[7/9/14, 2:46:23 PM] Alexey Migutsky: а вот хз
[7/9/14, 2:46:26 PM] Антон Шувалов: И так можно уменьшать и уменьшать, до формальной системы
[7/9/14, 2:46:45 PM] Alexey Migutsky: можно ли о системах в таком ключе размышлять
[7/9/14, 2:47:04 PM] Alexey Migutsky: Тут, кстати, "протекание знаний" примерно равно "текучим абстракциям"
[7/9/14, 2:47:07 PM] Антон Шувалов: Не то? О системах достаточно много информации, как мне кажется. Может ты по неправильным терминам ориентируешься, и по этому не можешь найти информацию о потоке, когда это система? (если я правильно тебя понял)
[7/9/14, 2:47:13 PM] Alexey Migutsky: но как я понял - не тоже самое
[7/9/14, 2:47:19 PM] Alexey Migutsky: или это просто я так понял :)
[7/9/14, 2:47:37 PM] Alexey Migutsky: > из набора систем более низкого уровня
вот фишка как раз в том, что на самом низком уровне у вас "неделимые факты"
[7/9/14, 2:47:56 PM] Антон Шувалов: Текучие абстракции — это, как мне кажется, эскалирование ошибки в системе
[7/9/14, 2:48:19 PM] Alexey Migutsky: т.е. в итоге да, для того, чтобы получить "скейляшееся решение" вам нужно сделать так, чтобы каждый компонент был "нелелимым хранилищем знаний" для клиента этого компонента
[7/9/14, 2:48:52 PM] Alexey Migutsky: > это, как мне кажется, эскалирование ошибки в системе
не сомвсем, это о смешении слоёв абстракций
[7/9/14, 2:49:02 PM] Антон Шувалов: Когда ошибка в происходит в ее подсистеме (а может и ее подсистеме), и ты не опустившись вниз, до истинной причины проблемы, и не разобравшись в устройстве той подсистемы, в которой произошла проблема, не починишь надсистему?
[7/9/14, 2:49:05 PM] Alexey Migutsky: грубо говоря, это нарушение того же LoD
[7/9/14, 2:49:53 PM] Антон Шувалов: > смешении слоёв абстракций
Я совершенно другой понимаю под законом текучих абстракций)
[7/9/14, 2:49:55 PM] Alexey Migutsky: когда мы инкапсулировали алгоритм в классе, но на уровне библиотеки всё равно стучимся к низкоуровневым методам
[7/9/14, 2:50:12 PM] Kirill Cherkashin: Как-то слишком абстрактно
[7/9/14, 2:50:21 PM] Антон Шувалов: Хотя, сейчас задумался, правильно ли я вообще понимаю
[7/9/14, 2:50:49 PM] Alexey Migutsky: http://en.wikipedia.org/wiki/Leaky_abstraction
[7/9/14, 2:50:58 PM] Alexey Migutsky: a leaky abstraction is an implemented abstraction where details and limitations of the implementation leak through
[7/9/14, 2:51:24 PM] Антон Шувалов: Черт, я даже представить боюсь, что бы было, если б такой разговор начался в пабе под пиво (rofl)
[7/9/14, 2:52:33 PM] Антон Шувалов: А, все понял про текучие абстракции
[7/9/14, 2:52:42 PM] Антон Шувалов: Но, тогда, проксирование параметров в компонент абстракции — текучесть?
[7/9/14, 2:52:52 PM] Alexey Migutsky: Ну, сложно найти людей которые под пиво не скажут "да ну нахуй, давай без этого" :)))
[7/9/14, 2:53:18 PM] Alexey Migutsky: > Как-то слишком абстрактно
О том и речь, что без примеров реальных это ОООООООЧЕНЬ тяжело понять и воспринять
[7/9/14, 2:53:21 PM] Alexey Migutsky: нету формализма
[7/9/14, 2:53:31 PM] Антон Шувалов: Да, я тоже замечал. Поэтому и забавно)
[7/9/14, 2:54:53 PM] Alexey Migutsky: Собсно, вот термин, который ближе всего к понятию "знаний"
http://en.wikipedia.org/wiki/Modular_programming
[7/9/14, 2:54:57 PM] Антон Шувалов: Ну вот смотри пример: есть плагин для гранта, который просто проксирует опции в модуль, который выполняет задачу. https://github.com/shuvalov-anton/grunt-clinch/blob/master/tasks/clinch.js#L83
[7/9/14, 2:55:12 PM] Антон Шувалов: Это протекающая абстракция?
[7/9/14, 2:55:39 PM] Alexey Migutsky: Только в таких вот определениях не понятно, что есть "single aspect of functionality"
[7/9/14, 2:56:05 PM] Антон Шувалов: Но, с другой стороны, я не скрываю его api за своим, и позволяю напрямуювзаимодействовать с его конфигурацией, а значит, в случае обновления компонента, новые опции будут поддерживаться дефакто
[7/9/14, 2:56:24 PM] Alexey Migutsky: но в modular programming понятие модуля больше, чем понятие "знания"
[7/9/14, 2:57:41 PM] Alexey Migutsky: > Это протекающая абстракция?
не совсем. Под протекающей абстракцией понимается то, что какое-то свойство системы, вроде как инкапсулированное, всё равно проявляется
[7/9/14, 2:58:20 PM] Alexey Migutsky: тут нет привязки к коду
[7/9/14, 2:59:04 PM] Alexey Migutsky: вроде как абстракция - набор ячеек M x N
[7/9/14, 2:59:12 PM] Alexey Migutsky: абстрагирует от программиста память
[7/9/14, 2:59:15 PM] Alexey Migutsky: не знаю, как это лучше объяснить - отличное имхо объяснение в той же википедии - обход массива
[7/9/14, 2:59:35 PM] Alexey Migutsky: но для эффективного обхода нужно знать, что обходить по "горизонтали" быстрее, из-за устройства памяти
[7/9/14, 3:00:47 PM] Alexey Migutsky: другими словами, знание о том, как устроена память попадает в определение массива
[7/9/14, 3:01:27 PM] Alexey Migutsky: для того, чтобы эту утечку прикрыть, нужно бы это "знание" о порядке обхода убрать в отдельное "поведение" - в метод "iterate", к примеру
[7/9/14, 3:01:41 PM] Kirill Cherkashin: Антон, я не думаю, что у тебя в плагине есть протекающая астракция, у тебя есть АПИ который имеет смысл, и юзеру не нужно знать что внутри
[7/9/14, 3:01:48 PM] Kirill Cherkashin: И как это работает
[7/9/14, 3:03:32 PM] Alexey Migutsky: > а значит, в случае обновления компонента, новые опции будут поддерживаться дефакто
Это текучая штука, так как ты даёшь доступ к внутрянке системы, которая закрыта проксёй.

Клиенту твоей прокси нужно знать, как устроен этот объект опций и за что он отвечает внутри скрытой за проксёй либы
[7/9/14, 3:03:36 PM] Alexey Migutsky: если ты поменяешь либу - хана опциям
[7/9/14, 3:04:15 PM] Alexey Migutsky: [7/9/14, 22:02:04] Kirill Cherkashin: и юзеру не нужно знать что внутри
[7/9/14, 22:02:08] Kirill Cherkashin: И как это работает

Так вот тут наоборот - если изменится проксируемая либа - юзеру хана
[7/9/14, 3:04:25 PM] Alexey Migutsky: потому что ему нужно менять передаваемые опции
[7/9/14, 3:04:52 PM] Alexey Migutsky: возникает вопрос - зачем ему новое знание о том, что делает прокси, если он должен знать, какой компонент ей закрыт?
[7/9/14, 3:05:07 PM] Alexey Migutsky: тут имеет смысл сделать адаптер, который будет трансформировать опции
[7/9/14, 3:05:13 PM] Alexey Migutsky: в простом варианте - сами в себя :)
[7/9/14, 3:05:30 PM] Alexey Migutsky: но в случае изменения апи проксируемого компонента - можно просто поменять адаптер
[7/9/14, 3:05:53 PM] Kirill Cherkashin: Я не очень внимательно смотрел, я так понял, что ты пишешь свой конфиг снаружи, и конфиг какой-то другой либы внтури, а плагин просто делает какой-то препроцессинг и дает либе результат
[7/9/14, 3:05:57 PM] Alexey Migutsky: у пользователя остаётся тот же объект настрок, а мы передаём в новую либу новый "проадаптированный" объект
[7/9/14, 3:06:02 PM] Антон Шувалов: Хорошая мысль, кстати
[7/9/14, 3:06:13 PM] Alexey Migutsky: прокси знает о конфиге либы
[7/9/14, 3:06:17 PM] Alexey Migutsky: клиент знает о конфиге прокси
[7/9/14, 3:06:18 PM] Kirill Cherkashin: Если я неправильно понял, то прошу прощения
[7/9/14, 3:07:03 PM] Alexey Migutsky: эти знания независимы - потому что ты разлелил понятия "конфиг либы" и "конфиг прокси"
[7/9/14, 3:07:10 PM] Антон Шувалов: Конфиг внутри — это дефорлтные параметры
[7/9/14, 3:07:15 PM] Alexey Migutsky: а до этого было понятие "конфиг либы И прокси"
[7/9/14, 3:07:22 PM] Антон Шувалов: Да, все правильно, вроде
[7/9/14, 3:08:09 PM] Alexey Migutsky: т.е. в один прекрасный момент времени интерфейсы объекта настроек могут совпадать - но они выполняют разные роли
[7/9/14, 3:08:16 PM] Антон Шувалов: А кстати, вы разбираетесь в бекбоне?
[7/9/14, 3:08:32 PM] Антон Шувалов: У меня печальная печаль, которую я не могу понять как обойти
[7/9/14, 3:08:46 PM] Alexey Migutsky: тут понятие "роли" объекта и есть понятие "единицы знания"
[7/9/14, 3:09:23 PM] Kirill Cherkashin: Антон, давно не использовал бэкбон, но помучался в свое время
[7/9/14, 3:09:31 PM] Kirill Cherkashin: Можешь попробовать спросить
[7/9/14, 3:15:23 PM] Антон Шувалов: Ну вобщем, беда вот в чем. Есть редактор книги, у него есть страницы, есть список элементов страницы — 5 коллекций: видео, текст, аудио, картинки, html-виджеты, не суть. Есть undoManager, который сохраняет состояния элементов при их изменениях, и откатывает/возвращает их при undo/redo. Все ок, но при перелистывании страницы ресетятся коллекции элементов, и модели в undoManager оказываются нерабочими — все биндинги, ссылки на коллекции и служебные штуки удаляются. Стеки undo хранятся в массиве с ключом — номером страницы, и при перелистывании восстанавливаются, если существуют (живут в пределах открытой вкладки). Ну и я не могу понять, как сделать так, чтобы модели, которые были сброшенны, оживлялись обратно, и привязывались к нужным коллекциям
[7/9/14, 3:16:20 PM] Антон Шувалов: Вобщем-то у меня есть мысль, что проблему можно решить как-то просто, поэтому я подробно рассказал. Может надо не коллекцию undo оживлять, а как-то уровнем выше починить
[7/9/14, 3:17:02 PM] Kirill Cherkashin: А почему ресетятся коллекции элементов?
[7/9/14, 3:18:28 PM] Антон Шувалов: есть 5 коллекций, и при перелистывании в них загружается активная страница
[7/9/14, 3:18:45 PM] Антон Шувалов: ну а неактивная не нужна, типа. По крайней мере, была
[7/9/14, 3:19:46 PM] Антон Шувалов: Есть мысль, хранить все открываемые страницы, и рендерить только открытую. Не удаляя открытых перед этим
[7/9/14, 3:19:54 PM] Антон Шувалов: Но меня смущает память
[7/9/14, 3:20:27 PM] Kirill Cherkashin: А что именно за состояние? Что ты имеешь в виду когда говоришь "состояние видео"?
[7/9/14, 3:20:37 PM] Антон Шувалов: Получается, там будут все undo, модели всех открытых страниц и тд. Не многовато, думаете?
[7/9/14, 3:21:04 PM] Антон Шувалов: Учитывая, конечно, что объекты по ссылке передаются, правда
[7/9/14, 3:21:18 PM] Alexey Migutsky: > Есть undoManager, который сохраняет состояния элементов при их изменениях, и откатывает/возвращает их при undo/redo.
Как он хранит эти "знания"? Знания об изменениях?
И как накатывает их в модели?
[7/9/14, 3:21:25 PM] Kirill Cherkashin: И сколько страниц может быть в книге?
[7/9/14, 3:21:48 PM] Антон Шувалов: У элементов есть свойства: позиция, размер, ссылка на исходник, zindex и тд, и пользователь в визивиге с ними взаимодействует
[7/9/14, 3:21:57 PM] Alexey Migutsky: эти знания стоит вынести отдельно, чтобы менеджер умел отделить каждую дельту и применить её к "абстрактной модели"
[7/9/14, 3:22:07 PM] Антон Шувалов: 1 изменение = одно состояние. Но, скорее всего, это не очень большой объект, остальное все ссылки
[7/9/14, 3:22:32 PM] Антон Шувалов: страниц от 20, наверное, страниц 200 в среднем
[7/9/14, 3:22:53 PM] Антон Шувалов: Ну, это как inDesign, iBooks Author и тд. Те же задачи
[7/9/14, 3:23:00 PM] Антон Шувалов: журналы, книги
[7/9/14, 3:23:07 PM] Alexey Migutsky: короче, делай из менеджера event storage и механизм event sourcing
[7/9/14, 3:23:34 PM] Антон Шувалов: я вот такой менеджер анду использую https://github.com/osartun/Backbone.Undo.js
[7/9/14, 3:23:36 PM] Alexey Migutsky: каждая модель имеет своё айди
[7/9/14, 3:23:46 PM] Alexey Migutsky: ченж в менеджере определяется айди модели
[7/9/14, 3:24:17 PM] Alexey Migutsky: (id, oldValue, newValue, timestamp)
[7/9/14, 3:24:46 PM] Alexey Migutsky: и механизм накатывания ченжей
[7/9/14, 3:24:55 PM] Антон Шувалов: А может мне просто при перелистывании проходиться по сохраненным моделям и заменять их на воссозданные модели?
[7/9/14, 3:25:05 PM] Антон Шувалов: Мне надо вчера еще, на оленях и тд)
[7/9/14, 3:25:16 PM] Alexey Migutsky: который по id модели ищет ченжи, выстраивает их в очередь и накатывает на модель
[7/9/14, 3:25:34 PM] Alexey Migutsky: > по сохраненным моделям и заменять их на воссозданные модели?
так памяти же больше
[7/9/14, 3:25:42 PM] Alexey Migutsky: на кажом шагу модель хранить
[7/9/14, 3:26:05 PM] Антон Шувалов: Так по ссылкам же модели хранятся
[7/9/14, 3:26:18 PM] Антон Шувалов: Просто, по факту ссылка меняется и все. А старую GC съест
[7/9/14, 3:26:27 PM] Alexey Migutsky: так напили это минут за 30
[7/9/14, 3:26:36 PM] Alexey Migutsky: храни ченжи в хешмапе по id
[7/9/14, 3:27:26 PM] Alexey Migutsky: change : {fieldName: '', oldValue: '', newValue: ''}
[7/9/14, 3:27:37 PM] Alexey Migutsky: у тебя ивент сорсинг получится в итоге
[7/9/14, 3:27:57 PM] Alexey Migutsky: хешмап, в котором ключ - айди модели, велью - стек ченжей
[7/9/14, 3:28:08 PM] Kirill Cherkashin: Антон, вот это отличный пример протекшей абстракции, ты используешь либу, но тебе приходится бороться с тем, как именно она работает
[7/9/14, 3:28:18 PM] Антон Шувалов: Надо обдумать, мне, все таки это кажется не 30 минут, а 4 часа + баги потом. Хотя, если подумать, может и меньше. Ага, сейчас так и хранится
[7/9/14, 3:28:21 PM] Alexey Migutsky: контролировать память будешь потом, када решишь задачу с накатыванием ченжей
[7/9/14, 3:28:24 PM] Alexey Migutsky: стек лимитируется
[7/9/14, 3:28:29 PM] Антон Шувалов: Только {before: {}, after: {}, model: { id: id,  ... , collection: collection}}
[7/9/14, 3:28:34 PM] Alexey Migutsky: количество пар тоже
[7/9/14, 3:29:07 PM] Alexey Migutsky: > а 4 часа + баги потом.
так тут всего-то хранилище
[7/9/14, 3:29:13 PM] Alexey Migutsky: плюс метод "накатить" и "откатить"
[7/9/14, 3:29:19 PM] Антон Шувалов: Ага, это тоже есть
[7/9/14, 3:29:21 PM] Alexey Migutsky: который просто патчит текущую модель по стеку
[7/9/14, 3:29:41 PM] Alexey Migutsky: > Только {before: {}, after: {}, model: { id: id,  ... , collection: collection}}
у тебя ченж сложнее, сделать проще можешь?
[7/9/14, 3:29:41 PM] Антон Шувалов: > Антон, вот это отличный пример протекшей абстракции, ты используешь либу, но тебе приходится бороться с тем, как именно она работает
Мне кажется, я борюсь с бекбоном скорее
[7/9/14, 3:29:46 PM] Alexey Migutsky: 1 поле меняется в единицу времени
[7/9/14, 3:29:59 PM] Alexey Migutsky: чтобы модели было проще мержить
[7/9/14, 3:30:02 PM] Антон Шувалов: Кстати, наверное, я почти убежден :)
[7/9/14, 3:30:08 PM] Alexey Migutsky: отдельными детерминированными степами
[7/9/14, 3:30:15 PM] Kirill Cherkashin: Антон, самый дешевый вариант будет наверное сохранять модели и переиспользовать, более правильный - копать в сторону другого варианта обработки истории изменений, то что Алексей предлагает
[7/9/14, 3:30:37 PM] Антон Шувалов: Поле не одно. Может измениться positionX, positionY, скажем
[7/9/14, 3:30:54 PM] Alexey Migutsky: т.е. ты щас хранишь слепки моделей, а можно хранить просто ченж каждого поля
[7/9/14, 3:31:00 PM] Антон Шувалов: Тем более, там дебаунсер стоит, чтобы изменения пачкой приходили, но это не суть:)
[7/9/14, 3:31:25 PM] Alexey Migutsky: если у тебя 1 шаг в анду - это изменение нескольких полей, то храни минимальны объект с этими изменениями
[7/9/14, 3:31:54 PM] Антон Шувалов: В общем, попробую за минут 20 сделать вариант с сохранением моделей, если не прокатит перепишу либу на маленькую и свою, как Алексей предлагает.
[7/9/14, 3:32:06 PM] Антон Шувалов: Не, я не слепки храню
[7/9/14, 3:32:14 PM] Alexey Migutsky: > сохранять модели и переиспользовать,
там ебля с ссылками на объекты будет
[7/9/14, 3:32:17 PM] Alexey Migutsky: нужно заменять именно значения полей
[7/9/14, 3:32:23 PM] Alexey Migutsky: чтобы все ивенты файрились как надо
[7/9/14, 3:32:29 PM] Kirill Cherkashin: Вот кстати посмотрите на досуге: https://www.youtube.com/watch?v=SiFwRtCnxv4
[7/9/14, 3:32:33 PM] Антон Шувалов: Чейнж, но он может быть из пары полей — то, что приходит в model.changed
[7/9/14, 3:32:42 PM] Антон Шувалов: на "change" event
[7/9/14, 3:33:12 PM] Антон Шувалов: Вложенность 1 элемент максимум, можно _.clone сделать. Но да
[7/9/14, 3:33:20 PM] Антон Шувалов: Хотя, это мелочь. _.clone все решит
[7/9/14, 3:33:21 PM] Kirill Cherkashin: Чувак рассказывает как использовать неизменяемые объекты чтобы хранить стейт
[7/9/14, 3:34:10 PM] Антон Шувалов: пля, я весь день думаю об иммутабельных объектах)
[7/9/14, 3:34:24 PM] Антон Шувалов: Они бы решили проблему, как я понял.
[7/9/14, 3:34:44 PM] Антон Шувалов: Просто из коробки undo, без всего
[7/9/14, 3:34:48 PM] Alexey Migutsky: там не persistent tree случаем?
[7/9/14, 3:35:39 PM] Alexey Migutsky: http://en.wikipedia.org/wiki/Persistent_data_structure
[7/9/14, 3:35:42 PM] Антон Шувалов: А кстати, immutable же не очень ок в плане памяти? Как эта проблема решается?
[7/9/14, 3:36:40 PM] Alexey Migutsky: Почитай ссылку :)
[7/9/14, 3:36:52 PM] Kirill Cherkashin: В данном случае максимум реюзабилити
[7/9/14, 3:36:59 PM] Alexey Migutsky: через персистент дата структуры и решается
[7/9/14, 3:37:08 PM] Alexey Migutsky: ты не копируешь новый объект
[7/9/14, 3:37:16 PM] Kirill Cherkashin: Алексей, да, оно
[7/9/14, 3:37:23 PM] Alexey Migutsky: у тебя есть дерево, а новый объект это "состояние дерева" + "ветка с изменением"
[7/9/14, 3:38:00 PM] Антон Шувалов: а, как цепочка прототипов?
[7/9/14, 3:38:24 PM] Alexey Migutsky: как модель в git, штоле :)
[7/9/14, 3:38:34 PM] Kirill Cherkashin: И там в конце виде пример андо/редо для простенького графического редактора
[7/9/14, 3:38:38 PM] Alexey Migutsky: каждая иммутабл ссылка - это референс на ветку дерева
[7/9/14, 3:39:03 PM] Alexey Migutsky: > а, как цепочка прототипов?
ага, очень похоже. Тока свойства переписывать низя
[7/9/14, 3:39:04 PM] Kirill Cherkashin: И есть библиотека, которую он написал под это дело, я правда не использовал, но хочу как нибудь
[7/9/14, 3:39:08 PM] Антон Шувалов: Хотя нет, тогда если где-то в коде изменится состояние одного из родителей, то вся персистентность — всё
[7/9/14, 3:40:02 PM] Антон Шувалов: А, ну понял. Дописываешь свойство — получаешь новый инстанс.
[7/9/14, 3:40:03 PM] Alexey Migutsky: > И там в конце виде пример андо/редо для простенького графического редактора
Собсно, я Антону такую штуку и советую. Но вместо "встроенного" хождения по дереву у него будет "накатывание новых веток на базовое дерево"
[7/9/14, 3:40:05 PM] Kirill Cherkashin: Антон, идея в том, чтобы разбивать все на дотсточно маленькие блоки
[7/9/14, 3:40:20 PM] Kirill Cherkashin: Тогда если родитель меняется созается новый объект с такими же сслыками на детей
[7/9/14, 3:40:31 PM] Антон Шувалов: В принципе, это несложно поверх объекта сделать на Object.observable, как мне кажется
[7/9/14, 3:40:39 PM] Kirill Cherkashin: И получается новое дерево, еще дешевле чем ребенка заменить
[7/9/14, 3:40:43 PM] Alexey Migutsky: > Хотя нет, тогда если где-то в коде изменится состояние одного из родителей, то вся персистентность — всё
Ну так структура получается примерно такая же, но тока запись свойств запрещена
[7/9/14, 3:40:46 PM] Alexey Migutsky: в прототипах это shadowing
[7/9/14, 3:41:36 PM] Антон Шувалов: не слышал про shadowing в js. Надо почитать
[7/9/14, 3:41:42 PM] Alexey Migutsky: собсно, имхо на прототипах можно персистент замутить
[7/9/14, 3:41:56 PM] Alexey Migutsky: цепочка прототипов же - линкед лист
[7/9/14, 3:42:42 PM] Alexey Migutsky: > не слышал про shadowing в js. Надо почитать
когда ты определяешь точно такое же поле, как в прототипе - оно "перекрывает" значение в прототипе
[7/9/14, 3:42:56 PM] Антон Шувалов: > собсно, имхо на прототипах можно персистент замутить
Но тогда тебе ветки через getter'ы и setter'ы создавать надо, чтобы изменения перехватывать
[7/9/14, 3:43:14 PM] Антон Шувалов: Как в bb — model.set('value')
[7/9/14, 3:43:23 PM] Антон Шувалов: А через object.observable() это можно прозрачно сделать
[7/9/14, 3:43:31 PM] Kirill Cherkashin: Не очень понимаю, какой бенефит дают прототипы по сравнению с обычными хешами?
[7/9/14, 3:44:08 PM] Alexey Migutsky: ну да, как-то так
[7/9/14, 3:44:24 PM] Alexey Migutsky: > Не очень понимаю, какой бенефит дают прототипы по сравнению с обычными хешами?
А не быстрее ли они будут?
[7/9/14, 3:44:50 PM] Антон Шувалов: Так дерево же. Ты запрашиваешь свойство, если его нет в последнем слое — оно ищется у прототипа встроенными средствами js
[7/9/14, 3:44:59 PM] Антон Шувалов: скорее всего быстрее, да
[7/9/14, 3:46:45 PM] Alexey Migutsky: ёпт, так это mori :)))
[7/9/14, 3:46:46 PM] Kirill Cherkashin: У меня по ходу интерент сейчас вырубится
[7/9/14, 3:46:59 PM] Alexey Migutsky: тока что досмотрел до момента "mori is available on npm"
[7/9/14, 3:47:03 PM] Alexey Migutsky: знаем-с такую штуку
[7/9/14, 3:49:28 PM] Kirill Cherkashin: Антон, я спалил, что ты в рамблере работаешь, он там жив еще? Что с ним?
[7/9/14, 3:49:29 PM] Alexey Migutsky: мне вот не хватает иммутабилити в ангуляре
[7/9/14, 3:49:34 PM] Alexey Migutsky: я думаю, многим не хватает
[7/9/14, 3:49:45 PM] Alexey Migutsky: иначе проверки дайджест цикла там были бы в разы быстрее
[7/9/14, 3:51:15 PM] Kirill Cherkashin: Хм, ну идея прикольная, но тогда запись была бы дороже
[7/9/14, 3:51:34 PM] Alexey Migutsky: надо пилить свой фреймворк, короче :)
[7/9/14, 3:51:52 PM] Alexey Migutsky: ибо на кложу весь мир не пересадишь :))
[7/9/14, 3:52:32 PM] Kirill Cherkashin: Ну да
[7/9/14, 3:53:28 PM] Alexey Migutsky: > но тогда запись была бы дороже
А это не страшно
[7/9/14, 3:53:34 PM] Kirill Cherkashin: Ладно, я пойду, но завершая наш разговор
[7/9/14, 3:53:39 PM] Kirill Cherkashin: Было бы реально круто сделать статью
[7/9/14, 3:53:49 PM] Kirill Cherkashin: Выписать там все принципы
[7/9/14, 3:53:56 PM] Alexey Migutsky: она не будет в 10 раз медленнее, а вот сравнение мутабл объекта замедляет дайджест примерно на порядок
[7/9/14, 3:54:02 PM] Kirill Cherkashin: SOLID, те, что мы обсуждали и те, что не обсуждали
[7/9/14, 3:54:07 PM] Kirill Cherkashin: И для каждого написать реальные примеры
[7/9/14, 3:54:23 PM] Kirill Cherkashin: как это относится (или не относится) к JS
[7/9/14, 3:54:31 PM] Kirill Cherkashin: И как это работает с разными фреймворками
[7/9/14, 3:54:50 PM] Kirill Cherkashin: Даже если это будет в таком виде, как Алексей расписал про деметру, это ок
[7/9/14, 3:54:53 PM] Alexey Migutsky: ага, я уже обдумываю как бы это сделать
[7/9/14, 3:55:02 PM] Kirill Cherkashin: Можно пописать и отполировать
[7/9/14, 3:55:12 PM] Kirill Cherkashin: И найти людей, которые могут выразить жто понятнее
[7/9/14, 3:55:54 PM] Kirill Cherkashin: Маркдавн файл на гитхабе?
[7/9/14, 3:56:30 PM] Alexey Migutsky: Я описал не стока деметру, скока способ мышления обо всех этих подходах
[7/9/14, 4:01:24 PM] Kirill Cherkashin: Антон, тебе это интересно?
[7/9/14, 4:04:58 PM] Kirill Cherkashin: Антон свалил по ходу
[7/9/14, 4:07:17 PM] Антон Шувалов: сори, я тут задумался
[7/9/14, 4:07:18 PM] Антон Шувалов: https://github.com/shuvalov-anton/node-immutable/blob/master/test/index.js
[7/9/14, 4:07:23 PM] Антон Шувалов: Я верно понял immutable?
[7/9/14, 4:08:33 PM] Антон Шувалов: А, про рамблер, жив. Это ж холдинг — там много проектов
[7/9/14, 4:09:41 PM] Антон Шувалов: Я в межпроектной штуке, вроде как. Правда, я там первый месяц и мы еще не начали толком ничего там. Но в целом, мне нравится. Но я больше из-за руководителя пришел. Подумал, что крутой чувак, и так и оказалось
[7/9/14, 4:11:28 PM] Антон Шувалов: А по поводу SOLID, да, интересно
[7/9/14, 4:11:36 PM] Антон Шувалов: Тоже думал преложить
[7/9/14, 4:11:50 PM] Kirill Cherkashin: Антон, я смотрю тесты и не очень понятно, если имеется в виду, что они должны выполняться в том порядке что заданы, то - да, примерно так должн о работать
[7/9/14, 4:12:22 PM] Kirill Cherkashin: Но обычно к таким штукам делают отдельные интерфейсы
[7/9/14, 4:12:42 PM] Антон Шувалов: Ага, так и есть. Интересно, можно ли такого добиться в JS с помощью Object.observable
[7/9/14, 4:12:43 PM] Kirill Cherkashin: Я сделал организацию на гитхабе
[7/9/14, 4:12:46 PM] Kirill Cherkashin: И добавил вас
[7/9/14, 4:13:11 PM] Alexey Migutsky: тока с одной оговоркой - любое "измение" объекта должно возвращать новый объект
[7/9/14, 4:13:18 PM] Антон Шувалов: Оу, круто)
[7/9/14, 4:13:27 PM] Антон Шувалов: Серьезный подход хДД
[7/9/14, 4:14:04 PM] Антон Шувалов: > тока с одной оговоркой - любое "измение" объекта должно возвращать новый объект
Там так и предполагается. Ну, то есть, насколько я понимаю, без этого не реализовать такое точно
[7/9/14, 4:14:34 PM] Alexey Migutsky: val child.c = 'y';
val new_child = (child.c = 'x')
должно возвращать 
new_child.c === 'x'
при этом 
child.c === 'y'
[7/9/14, 4:15:41 PM] Alexey Migutsky: или по другому 
var a = [];
var b = a.push('x');
assert(a === []);
assert(b === ['x']);
[7/9/14, 4:15:56 PM] Kirill Cherkashin: что-то типа secondChild = child.set('a', 1)
[7/9/14, 4:16:29 PM] Alexey Migutsky: ага. и вот эти доп интерфейсы всё портят :)
[7/9/14, 4:18:22 PM] Kirill Cherkashin: secondChild = child.a = 1 ?
[7/9/14, 4:18:36 PM] Антон Шувалов: Алексей, да, это тоже. С set'ами для меня вполне очевидно, как это сделать. А вот без них уже интереснее
[7/9/14, 4:19:08 PM] Антон Шувалов: secondChild === 1 же
[7/9/14, 4:20:13 PM] Антон Шувалов: в твоем примере 1-ка присваивается secondChild и child.a
[7/9/14, 4:20:34 PM] Антон Шувалов: child.a = 1 возвращает 1-цу
[7/9/14, 4:21:34 PM] Kirill Cherkashin: Да, это я сарказма добавил, типа непонятно как сделать
[7/9/14, 4:21:39 PM] Антон Шувалов: И в этом примере то же `new_child = (child.c = 'x')`
[7/9/14, 4:21:58 PM] Антон Шувалов: Но суть я понял
[7/9/14, 4:22:22 PM] Антон Шувалов: Кстати, давайте скопируем текст обсуждения solid в репо
[7/9/14, 4:22:27 PM] Антон Шувалов: Чтоб не потерять
